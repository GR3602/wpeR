[{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"Introduction to wpeR package","text":"wpeR works two main input datasets: Pedigree COLONY pedigree data.reconstructed pedigree output COLONY software stored colony project output folder. function get_colony() automatically reads pedigree file need import R session. Custom pedigree data. Users can work pedigree data reconstructed software long follows formatting rules specified get_ped() function. Genetic samples metadata. dataset include information genetic samples belonging animals included pedigree must include columns describe: Sample unique identifier code. Date sample collection YYYY-MM-DD format. Identifier code particular individual sample belongs . Genetic sex coded M males, F females NA unknown sex. Geographic location sample collected, latitude longitude WGS84 coordinate system (EPSG: 4326). Sample type (eg: scat, urine, tissue) Correctly formatted genetic samples metadata crucial proper functioning wpeR functions. ensure genetic samples metadata conforms package’s rules, package includes check_sampledata() function. function performs series checks validations input data verify integrity compatibility. validations passed check_sampledata() function outputs sample metadata data frame can seamlessly used downstream analyses. example pedigree sample metadata (wolf_samples) included package two datasets used throughout vignette. check genetic sample metadata formatted correctly can link columns data frame parameters check_sampledata() function: errors warnings execution check_sampledata() function, indicates genetic sample metadata correctly formatted. can use returned data frame, downstream analyses. Example properly formatted sample metadata required columns looks like :","code":"sampledata <- check_sampledata(   Sample = wolf_samples$Sample,   Date = wolf_samples$Date,   AnimalRef = wolf_samples$AnimalRef,   GeneticSex = wolf_samples$GeneticSex,   lat = wolf_samples$lat,   lng = wolf_samples$lng,   SType = wolf_samples$SType ) head(sampledata) #>   Sample       Date AnimalRef GeneticSex      lat      lng SType #> 1  M10XC 2017-11-16     M10XC          M 45.70766 14.12922  Scat #> 2  M0PXH 2017-11-22     M10XC          M 45.71356 14.10497  Scat #> 3  M0PFL 2017-12-22     M10XC          M 45.69898 14.07907  Scat #> 4  M1J47 2019-08-20     M1J47          M 45.70854 14.09644  Scat #> 5  M1HF2 2019-08-31     M1J47          M 45.69930 14.05550  Scat #> 6 MSV163 2020-07-17     M1J47          M 45.71804 14.14319  Scat"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"the-workflow","dir":"Articles","previous_headings":"","what":"The workflow","title":"Introduction to wpeR package","text":"Since many functions wpeR build upon results previous functions, recommended follow specific sequence using package. , present optimal workflow using wpeR.","code":""},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"import-the-pedigree","dir":"Articles","previous_headings":"The workflow","what":"Import the pedigree","title":"Introduction to wpeR package","text":"COLONY PEDIGREE DATA Pedigree reconstructed COLONY software imported R session get_colony() function. Apart form reading colony output file get_colony() also adds missing parents OffspirngID, assigns sex animal adds probability paternity maternity assignment calculated COLONY. CUSTOM PEDIGREE DATA cases pedigree reconstructed COLONY software must use get_ped() function. hood get_colony() get_ped() similar, latter little less functionalities, primarily designed pedigree data can used downstream analysis. using get_ped() function important note ped parameter (reconstructed pedigree) formatted basic pedigree four columns corresponding offspring (named OffspringID), father (named FatherID) mother (named MotherID). Unknown parents represented NA values. output get_colony() get_ped() functions can can formatted different ways facilitate downstream analysis R packages pedigree analysis visualization. format output defined parameter. functions support downstream analysis kinship2, pedtools FamAgg packages.","code":"path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\") ped_colony <- get_colony(   colony_project_path = path,    sampledata =  wolf_samples   )  tail(ped_colony) #>    ClusterIndex     id father mother sex #> 60            1 MSV0T7  M20AM  M273P   1 #> 61            1 MSV0TJ  M20AM  M273P   2 #> 62            1 MSV0UL  M20AM  M273P   1 #> 63            1 MSV0X4  M20AM  M273P   1 #> 64            1 MSV17F  M20AM  M273P   2 #> 65            1 MSV1MH  M20AM  M273P   2 ped <- data.frame(   OffspringID = c(     \"M273P\", \"M20AM\", \"M2757\", \"M2ALK\", \"M2ETE\", \"M2EUJ\", \"MSV00E\",     \"MSV018\", \"MSV05L\", \"MSV0M6\", \"MSV0T4\", \"MSV0T7\", \"MSV0TJ\", \"MSV0UL\"   ),   FatherID = c(     NA, NA, \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\",     \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\"   ),   MotherID = c(     NA, NA, \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\",     \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\"   ) )   get_ped(     ped = ped,     sampledata = wolf_samples     ) #>        id father mother sex #> 1   M273P   <NA>   <NA>   2 #> 2   M20AM   <NA>   <NA>   1 #> 3   M2757  M20AM  M273P   2 #> 4   M2ALK  M20AM  M273P   2 #> 5   M2ETE  M20AM  M273P   2 #> 6   M2EUJ  M20AM  M273P   2 #> 7  MSV00E  M20AM  M273P   1 #> 8  MSV018  M20AM  M273P   1 #> 9  MSV05L  M20AM  M273P   1 #> 10 MSV0M6  M20AM  M273P   1 #> 11 MSV0T4  M20AM  M273P   1 #> 12 MSV0T7  M20AM  M273P   1 #> 13 MSV0TJ  M20AM  M273P   2 #> 14 MSV0UL  M20AM  M273P   1"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"example-get_colony-kinship2","dir":"Articles","previous_headings":"The workflow > Import the pedigree","what":"[example] get_colony() & kinship2","title":"Introduction to wpeR package","text":"","code":"library(kinship2) #> Loading required package: Matrix #> Loading required package: quadprog ped_ks2 <- get_colony(path, wolf_samples, out = \"kinship2\")  ped_ks2 <- ped_ks2[!(ped_ks2$dadid %in% \"M2AM8\"),]  ped_ks2 <- pedigree(   ped_ks2$id,   ped_ks2$dadid,   ped_ks2$momid,   ped_ks2$sex ) plot(ped_ks2, symbolsize = 1.5, cex = 0.4) #> Did not plot the following people: M2AM8"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"animal-timespan","dir":"Articles","previous_headings":"The workflow","what":"Animal timespan","title":"Introduction to wpeR package","text":"anim_timespan() function creates ‘first seen’ ‘last seen’ columns animal pedigree examining dates genetic samples associated animal. important step obtaining temporal perspective pedigree, allows functions work time frame animal observed. Besides functions determines animal dead based predefined sample type eg. tissue. shown anim_timespan() function creates sort code list animal detection time frame. feed data subsequent functions anim_timespan() function output needs merged sample metadata. additional step ensures relevant information animal included facilitates downstream analysis.","code":"animal_ts <- anim_timespan(   individual_id = wolf_samples$AnimalRef,   sample_date = wolf_samples$Date,   sample_type = wolf_samples$SType,   dead = c(\"Tissue\") )  head(animal_ts) #>      ID  FirstSeen   LastSeen IsDead #> 1 M10XC 2017-11-16 2017-12-22  FALSE #> 2 M1J47 2019-08-20 2021-01-07  FALSE #> 3 M1YP0 2017-01-25 2017-01-25   TRUE #> 4 M200F 2015-07-27 2018-08-22  FALSE #> 5 M20AM 2016-08-29 2020-08-02  FALSE #> 6 M220J 2017-11-10 2018-02-17  FALSE sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE ) head(sampledata) #>   AnimalRef Sample       Date GeneticSex      lat      lng SType  FirstSeen #> 1     M10XC  M10XC 2017-11-16          M 45.70766 14.12922  Scat 2017-11-16 #> 2     M10XC  M0PXH 2017-11-22          M 45.71356 14.10497  Scat 2017-11-16 #> 3     M10XC  M0PFL 2017-12-22          M 45.69898 14.07907  Scat 2017-11-16 #> 4     M1J47  M1J47 2019-08-20          M 45.70854 14.09644  Scat 2019-08-20 #> 5     M1J47  M1HF2 2019-08-31          M 45.69930 14.05550  Scat 2019-08-20 #> 6     M1J47 MSV163 2020-07-17          M 45.71804 14.14319  Scat 2019-08-20 #>     LastSeen IsDead #> 1 2017-12-22  FALSE #> 2 2017-12-22  FALSE #> 3 2017-12-22  FALSE #> 4 2021-01-07  FALSE #> 5 2021-01-07  FALSE #> 6 2021-01-07  FALSE"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"organize-families","dir":"Articles","previous_headings":"The workflow","what":"Organize families","title":"Introduction to wpeR package","text":"org_fams() function takes pedigree data generated get_colony()/get_ped() function groups animals families. function expands pedigree adding information family individual born individual’s status reproductive animal. Based ´output´ parameter function can return data frame (ped fams) list two objects (ped fams). examples present two data frames separately. result org_fams() function introduces us two important concepts within context package: family half-sib group. wpeR package, family defined group animals least one parent least one offspring known. Meanwhile, half-sib group refers group half-siblings either maternally paternally related. function’s output, DadHSgroup parameter groups paternal half-siblings, MomHSgroup parameter groups maternal half-siblings.","code":""},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"pedigree","dir":"Articles","previous_headings":"The workflow > Organize families","what":"Pedigree","title":"Introduction to wpeR package","text":"ped output just extend version pedigree obtained get_colony() function. Apart common pedigree information individual, mother, father, sex, family), ped also includes information : parents: identifier codes parents separated ⁠_⁠, FamID: number family individual belongs (see Families ), FirstSeen: date first sample individual, LastSeen: date last sample individual, IsDead: logical value (TRUE/FALSE) identifies individual dead, DadHSgroup: identifier paternal half-sib group, MomHSgroup: identifier maternal half-sib group, hsGroup: half-sib group individual.","code":"ped_org <- org_fams(ped = ped_colony, sampledata = sampledata, output = \"ped\")  tail(ped_org) #>    ClusterIndex     id father mother sex     parents FamID  FirstSeen #> 60            1 MSV0T7  M20AM  M273P   1 M20AM_M273P     5 2019-08-11 #> 61            1 MSV0TJ  M20AM  M273P   2 M20AM_M273P     5 2019-12-28 #> 62            1 MSV0UL  M20AM  M273P   1 M20AM_M273P     5 2020-07-15 #> 63            1 MSV0X4  M20AM  M273P   1 M20AM_M273P     5 2019-09-03 #> 64            1 MSV17F  M20AM  M273P   2 M20AM_M273P     5 2020-11-08 #> 65            1 MSV1MH  M20AM  M273P   2 M20AM_M273P     5 2021-02-25 #>      LastSeen IsDead DadHSgroup MomHSgroup hsGroup #> 60 2020-02-09   TRUE       <NA>       <NA>       4 #> 61 2019-12-28   TRUE       <NA>       <NA>       4 #> 62 2020-07-15  FALSE       <NA>       <NA>       4 #> 63 2019-10-23   TRUE       <NA>       <NA>       4 #> 64 2020-12-04  FALSE       <NA>       <NA>       4 #> 65 2021-07-15  FALSE       <NA>       <NA>       4"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"families","dir":"Articles","previous_headings":"The workflow > Organize families","what":"Families","title":"Introduction to wpeR package","text":"fams output contains information families individuals pedigree belong. families described : parents: identifier codes parents separated ⁠_⁠, father: identifier code father, mother: identifier code mother, FamID: numeric value identifies particular family, famStart: date first sample family members collected1, famEnd: date last sample family members collected1, FamDead: logical value (TRUE/FALSE) identifies family exist , DadHSgroup: Identifier connecting families share father. MomHSgroup: Identifier connecting families share mother. hsGroup: Numeric value connecting families share one parents. 1famStart famEnd columns, estimate time window family based solely sample collection dates provided sampledata. famStart indicates date earliest sample collected offspring belonging family. famEnd indicates date latest sample collected either mother father family. important recognize method relies observation (sampling) dates. Consequently, famEnd (last parental sample date) can precede famStart (first offspring sample date), creating biologically impossible sequence negative calculated family timespan. Users interpret interval famStart famEnd understanding.","code":"fams_org <- org_fams(ped = ped_colony, sampledata = sampledata, output = \"fams\")  head(fams_org) #>         parents   father   mother FamID   FamStart     FamEnd FamDead #> 7   M228J_M200F    M228J    M200F     1 2017-01-25 2018-08-22    TRUE #> 15 MSV00E_M28LU   MSV00E    M28LU     2 2020-08-16 2021-03-05   FALSE #> 24  M2772_M28TU    M2772    M28TU     3 2019-08-28 2021-04-23   FALSE #> 33  M2AM8_M200F    M2AM8    M200F     4 2018-10-29 2021-03-23   FALSE #> 51  M20AM_M273P    M20AM    M273P     5 2018-01-05 2020-08-02   FALSE #> NA      Unknown *Unknown #Unknown     0 2015-07-27 2021-04-23   FALSE #>    DadHSgroup MomHSgroup hsGroup #> 7        <NA>     MomP_1       1 #> 15       <NA>       <NA>       2 #> 24       <NA>       <NA>       3 #> 33       <NA>     MomP_1       1 #> 51       <NA>       <NA>       4 #> NA       <NA>       <NA>       0"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"plotting-table","dir":"Articles","previous_headings":"The workflow","what":"Plotting table","title":"Introduction to wpeR package","text":"produce temporal spatial pedigree representation, sample metadata needs formatted specific way, can achieved plot_table() function. function combines outputs previous functions (fams ped org_fams() function) sample metadata, three data frames serving inputs. function offers flexibility selecting families visualization plot_fams parameter. include families included pedigree, plot_fams set “” (default). plotting subset families, provide numeric vector desired FamIDs, family identification numbers generated org_fams() can seen fams output table. order plot_table() function work sample metadata include specific information, already defined Input data part vignette, apart form sample metadata must also include columns date first last sample individual logical value identifying individual dead. additional information can added anim_timespan() function (see Animal timespan). information stored sample data use default column names (see check documentation ?plot_table) custom names can defined vector parameter datacolumns. plot_table() function output adds additional information sample metadata include: plottingID: Identifier number temporal pedigree plot ped_satplot. case polygamous animals individual can included one family, FamID: Identifier number family individual belongs , hsGroup: Numeric. Identifier number half-sib group individual. rep: individual reproductive current family, (current family defined FamID particular entry), later_rep: individual reproductive (later) families, isPolygamous: individual one mate, dead: individual dead, first_sample: particular sample first sample individual, last_sample: particular sample last sample individual, isReference: particular sample reference sample individual. Apart adding additional information sample metadata, plot_table() also duplicates sample entries (rows) animals present one family (eg. polygamous animals, animals detected offspring one family later reproductive animal another). Considering , crucial users aware data duplication utilizing plot_table() output analysis outside scope package. applying plot_table() function, pedigree data prepared temporal spatial visualization, marking completion data preparation phase package’s workflow. data visualization stage involves two functions: ped_satplot() temporal representation ped_spatial() spatial representation.","code":"pt <- plot_table(   plot_fams = \"all\",   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\") )  head(pt) #>     Sample AnimalRef GeneticSex       Date  SType      lat      lng  FirstSeen #> 54   M20AP     M228J          M 2016-09-30 Saliva 45.71140 14.01201 2016-09-30 #> 55   M228J     M228J          M 2017-01-26   Scat 45.70406 14.12798 2016-09-30 #> 56   M28ML     M228J          M 2017-08-18 Saliva 45.67397 14.11150 2016-09-30 #> 57   M28MM     M228J          M 2017-08-18 Saliva 45.67397 14.11150 2016-09-30 #> 58   M2C36     M228J          M 2018-02-09 Tissue 45.67033 14.15404 2016-09-30 #> 10 EX.1JH0     M200F          F 2015-07-27 Saliva 45.75250 14.14653 2015-07-27 #>      LastSeen IsDead plottingID FamID hsGroup  rep later_rep isPolygamous  dead #> 54 2018-02-09   TRUE          1     1       1 TRUE     FALSE        FALSE FALSE #> 55 2018-02-09   TRUE          1     1       1 TRUE     FALSE        FALSE FALSE #> 56 2018-02-09   TRUE          1     1       1 TRUE     FALSE        FALSE FALSE #> 57 2018-02-09   TRUE          1     1       1 TRUE     FALSE        FALSE FALSE #> 58 2018-02-09   TRUE          1     1       1 TRUE     FALSE        FALSE  TRUE #> 10 2018-08-22  FALSE          2     1       1 TRUE     FALSE         TRUE FALSE #>    first_sample last_sample IsReference #> 54         TRUE       FALSE       FALSE #> 55        FALSE       FALSE        TRUE #> 56        FALSE       FALSE       FALSE #> 57        FALSE       FALSE       FALSE #> 58        FALSE        TRUE       FALSE #> 10         TRUE       FALSE       FALSE nrow(sampledata) == nrow(pt) #> [1] FALSE"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"temporal-plot","dir":"Articles","previous_headings":"The workflow","what":"Temporal plot","title":"Introduction to wpeR package","text":"core temporal plot, generated ped_satplot() function, representation occurrence samples individual (y-axis) trough time (x-axis). Furthermore individuals first grouped families half-sib groups. Within family, individuals arranged top bottom based date first sample collection. bottom family, animal initially detected positioned, followed subsequent animals chronological order. layout enables visual understanding temporal relationships within families, family forming distinct cluster plot. sample visually depicted point plot, points connected lines represent continuous survival individual. connection remains intact even periods samples particular individual collected. sample can additional marked represent additional characteristics particular individual (eg. reproductive animal, polygamous animal). Additionally, certain samples can marked indicate mortality (eg. tissue samples).  get started first plot important look back plot_table() function previously mentioned plot_fams parameter. parameter allow us select subset families like plot. example just one family (FamID = 4) selected plotting.  example two families share mother (FamID = 1 & 4)  Technically, limit number families can plotted manner. However, number families increases, complexity graph intensifies, making progressively challenging comprehend. can observed example five families, two share reproductive animal.","code":"pt <- plot_table(   plot_fams = 4,   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  sp <- ped_satplot(pt)  sp pt <- plot_table(   plot_fams = c(1,4),   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  sp <- ped_satplot(pt)  sp pt <- plot_table(   plot_fams = c(1:5),   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  sp <- ped_satplot(pt)  sp"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"spatial-files","dir":"Articles","previous_headings":"The workflow","what":"Spatial files","title":"Introduction to wpeR package","text":"incorporate spatial dimension pedigree analysis, ped_spatial() function comes play. Acting wrapper function, ped_spatial() combines multiple functions utilize output plot_table() function, transforming various sf objects can visualized map. ’s worth noting function automatically removes samples without coordinates, plotted. utilizing default function parameters, ped_spatial() function produces list containing 14 sf objects. integration POINT, LINESTRING, POLYGON geometries, ped_spatial() function generates sf objects establish connections parent offspring samples, well samples individual. enables users analyze interpret spatial progression pedigree. Created objects can categorized 5 broader categories: ...Rpoints: POINT object representing reference sample animal. case ...Rpoints number points represents number animals included plot_table() function output. reference points represent just one sample individual. reproductive individuals (mothers fathers), reference point location last sample within specified time window. offspring, reference point location first sample within time window. ...MovePoints: POINT object representing samples particular animal. maternity/paternityLines: LINESTRING object connecting reference samples mothers (motherRpoints) fathers (fatherRpoints) reference samples offspring (offspringRpoints). lines visually depict parent-offspring relationships pedigree. ...MoveLines: LINESTRING object connecting ...MovePoints individual chronological order, showcasing movement changes location time specific animal. ...MovePolygons: POLYGON object representing convex hull encloses samples individual. provides graphical representation spatial extent range covered animal based sample locations. specifying fulsibdata parameter ped_spatial() function, can include FullsibLines object output list. FullsibLines LINESTRING object connecting reference samples full siblings. ped_spatial() function, flexibility define time window selecting samples used generate spatial pedigree outputs. specifying time.limits parameter, can set start end dates limit samples included spatial representation. time.limits parameter defined vector two dates Date format. Moreover, function provides option apply time.limits selectively specific types output data: - time.limit.repparameter enables application time limits solely offspring reference movement points, - time.limit.offspring parameter applies time.limits offspring reference movement points, - time.limit.moves parameter permits application time limits movement lines individuals.","code":"pt <- plot_table(   plot_fams = 1,   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  ps <- ped_spatial(pt)  summary(ps) #>                       Length Class Mode #> motherRpoints         16     sf    list #> fatherRpoints         16     sf    list #> offspringRpoints      19     sf    list #> motherMovePoints      16     sf    list #> fatherMovePoints      16     sf    list #> offspringMovePoints   19     sf    list #> maternityLines         8     sf    list #> paternityLines         8     sf    list #> motherMoveLines        3     sf    list #> fatherMoveLines        3     sf    list #> offspringMoveLines     3     sf    list #> motherMovePolygons     3     sf    list #> fatherMovePolygons     3     sf    list #> offspringMovePolygons  3     sf    list fullsibdata <- read.csv(paste0(path,\".FullSibDyad\"))  ps <- ped_spatial(pt, fullsibdata = fullsibdata)  summary(ps) #>                       Length Class Mode #> motherRpoints         16     sf    list #> fatherRpoints         16     sf    list #> offspringRpoints      19     sf    list #> motherMovePoints      16     sf    list #> fatherMovePoints      16     sf    list #> offspringMovePoints   19     sf    list #> maternityLines         8     sf    list #> paternityLines         8     sf    list #> motherMoveLines        3     sf    list #> fatherMoveLines        3     sf    list #> offspringMoveLines     3     sf    list #> motherMovePolygons     3     sf    list #> fatherMovePolygons     3     sf    list #> offspringMovePolygons  3     sf    list #> FullsibLines           4     sf    list ps_tl <- ped_spatial(   plottable = pt,   time.limits = c(as.Date(\"2017-01-01\"), as.Date(\"2018-01-01\")),   time.limit.rep = TRUE,   time.limit.offspring = TRUE,   time.limit.moves = TRUE )"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"example-drawing-maps-in-r","dir":"Articles","previous_headings":"The workflow > Spatial files","what":"[example] Drawing maps in R","title":"Introduction to wpeR package","text":"showcase capabilities ped_spatial() function deepen comprehension data frames generated function, present series examples highlight maps produced utilization wpeR package. examples make use various R packages enable visual representation geographic datasets.","code":""},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"ggplot2","dir":"Articles","previous_headings":"The workflow > Spatial files > [example] Drawing maps in R","what":"ggplot2","title":"Introduction to wpeR package","text":"similar fashion temporal plots chapter 2.5, first set maps shows just one family. maps static produced ggplot2, basemaps ggsflabel packages. clearly represent output ped_spatial() function different spatial files presented separately three maps. First showing pedigree, second movement reproductive animals third movement offspring. Furthermore, three maps represented two different variants, one showing samples family members included sample metadata table utilizing time.limits parameter, subletting samples within defined time window (presented temporal plot orange dotted rectangle). begin creating plotting table (plot.table) family/families like plot (example family FamID == 1), plot_table() function. Subsequently, ped_spatial() function applied generate list sf data frames representing distribution animal samples relationships. Additionally generate second list sf files generated dataframes limited period “2017-01-01” “2018-01-01”. worth noting depending number families, individuals samples maps generated data can appear complex cluttered, especially time.limits parameter employed. parameter crucial refining visualizations, enhancing clarity interpretability. Temporal plot, showing individuals samples plotted family. Orange dashed rectangle encopasses samples fall within defined time limits. Legend explaining symbols used spatial pedigree representation. Spatial pedigree representation. ) samples, b) time window. Movement reproductive animals inffered collected samples. ) samples, b) time window. Movement offspring inffered collected samples. ) samples, b) time window.","code":"pt <- plot_table(   plot_fams = 1,   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  ps <- ped_spatial(pt)  ps.tl <- ped_spatial(   plottable = pt,   time.limits = c(as.Date(\"2017-01-01\"), as.Date(\"2018-01-01\")),   time.limit.rep = TRUE,   time.limit.offspring = TRUE,   time.limit.moves = TRUE )"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"leaflet","dir":"Articles","previous_headings":"The workflow > Spatial files > [example] Drawing maps in R","what":"leaflet","title":"Introduction to wpeR package","text":"","code":"library(leaflet) library(leaflet.providers)  pt <- plot_table(plot_fams = c(1:5),                         fams_org,                         ped_org,                         sampledata,                         deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\"))  ps <- ped_spatial(pt,                   time.limits = c(as.Date(\"2020-07-01\"), as.Date(\"2021-06-30\")),             time.limit.rep = TRUE,             time.limit.offspring = TRUE,             time.limit.moves = TRUE)"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"gis-output","dir":"Articles","previous_headings":"The workflow > Spatial files","what":"GIS output","title":"Introduction to wpeR package","text":"described default output ped_spatila() function list sf objects can analyzed visualized using R packages enable visual representation geographic datasets leaflet mapview. extend possibilities spatial analysis visualization outside R, ped_spatial()provides flexibility users export spatial data formats compatible Geographic Information System (GIS) software. specifying \"gis\" value output parameter defining folder path path parameter, users can store georeferenced files designated folder. allows seamless integration utilization pedigree data GIS software, unlocking wide range spatial analysis capabilities visualization options. created GIS files follow structure described , just output file names different: distinguish avoid overwriting generated files, parameter filename can used. string specified parameter acts common name files generated. generating GIS files function parameters can used described beginning chapter (eg. fullsibdata, time.limits).","code":"pt <- plot_table(   plot_fams = 1   all_fams = fams_org,   ped = ped_org,   sampledata = sampledata,   deadSample = c(\"Tissue\", \"Decomposing Tissue\", \"Blood\") )  ps <- ped_spatial(   plottable = pt,   output = \"gis\",   path = \"/folder/where/GIS/files/shuld/be/saved/\" )"},{"path":"https://gr3602.github.io/wpeR/articles/wpeR.html","id":"outside-of-the-workflow","dir":"Articles","previous_headings":"","what":"Outside of the workflow","title":"Introduction to wpeR package","text":"Besides functions facilitate visualization analysis pedigree data temporal spatial dimensions, wpeR package currently provides additional function designed aid calculation representation detected animals across multiple time periods. functions works just sample metadata can used independently workflow described previous chapter. calculate number captured animals two time periods function nbtw_seasons() used. function takes four parameters first two: animal_id capture_date correspond AnimalRef Date column meta data table, respectively. two vectors ´Date´ format one corresponding start end time periods interest. worth noting function refers time periods “seasons” terminology. function outputs matrix 1 + . time periods rows columns explaining dynamics animal deception included time periods. conveys information detected animals, newly detected animals, recaptured animals skipped animals. purpose detailed explanation, drop row column names. matrix presented : Column row 4 correspond number captured number skipped animals particular time period. diagonal gives number new detection time period. Numbers diagonal correspond number re-detected (recaptured) animals time period x (column names) compared time period y (row names). Numbers diagonal correspond number animals time period y skipped time period x. JUST TWO TIME PERIODS  get animal detection dynamics just two time periods nbtw_seasons() function can called. function provides simple output representing detection dynamics two time periods. function takes six parameters. First two described . parameters correspond strings Date format defining start end time periods interest. returned data frame first defines two time periods gives five values describing detection animals. total_cap gives number detected animal season 2, new_captures corresponds number new detection season 2, recaptured number animals detected season 1 season 2 skipped just opposite, number animals detected season 1 season 2.","code":"seasons <- data.frame(   start = c(     as.Date(\"2017-01-01\"),     as.Date(\"2018-01-01\"),     as.Date(\"2019-01-01\")   ),   end = c(     as.Date(\"2017-12-31\"),     as.Date(\"2018-12-31\"),     as.Date(\"2019-12-31\")   ) )  dyn_mat <- dyn_matrix(   animal_id = wolf_samples$AnimalRef,   capture_date = wolf_samples$Date,   start_dates = seasons$start,   end_dates = seasons$end )   dyn_mat #>                         2017-01-01 - 2017-12-31 2018-01-01 - 2018-12-31 #> 2017-01-01 - 2017-12-31                      13                       8 #> 2018-01-01 - 2018-12-31                       2                       4 #> 2019-01-01 - 2019-12-31                       0                       0 #> Tot. Skipped                                  0                       2 #>                         2019-01-01 - 2019-12-31 Tot. Capts #> 2017-01-01 - 2017-12-31                       6         13 #> 2018-01-01 - 2018-12-31                       6         12 #> 2019-01-01 - 2019-12-31                      17         25 #> Tot. Skipped                                  0         NA unname(dyn_mat) #>      [,1] [,2] [,3] [,4] #> [1,]   13    8    6   13 #> [2,]    2    4    6   12 #> [3,]    0    0   17   25 #> [4,]    0    2    0   NA nbtw_seasons(  animal_id = wolf_samples$AnimalRef,  capture_date = wolf_samples$Date,  season1_start = as.Date(\"2017-01-01\"),  season1_end = as.Date(\"2017-12-31\"),  season2_start = as.Date(\"2018-01-01\"),  season2_end = as.Date(\"2018-12-31\") ) #>                   season1                 season2 total_cap new_captures #> 1 2017-01-01 - 2017-12-31 2018-01-01 - 2018-12-31        12            4 #>   recaptures skipped #> 1          8       2"},{"path":"https://gr3602.github.io/wpeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomaz Skrbinsek. Author. Gregor Simcic. Author, maintainer.","code":""},{"path":"https://gr3602.github.io/wpeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Skrbinsek T, Simcic G (2025). wpeR: Streamlined Analysis Wild Pedigree Data. R package version 0.1.0, https://gr3602.github.io/wpeR/.","code":"@Manual{,   title = {wpeR: Streamlined Analysis of Wild Pedigree Data},   author = {Tomaz Skrbinsek and Gregor Simcic},   year = {2025},   note = {R package version 0.1.0},   url = {https://gr3602.github.io/wpeR/}, }"},{"path":"https://gr3602.github.io/wpeR/index.html","id":"wper","dir":"","previous_headings":"","what":"Streamlined Analysis of Wild Pedigree Data","title":"Streamlined Analysis of Wild Pedigree Data","text":"wild pedigree explorerR R package designed simplify analysis wild pedigree data. package primarily developed work pedigree data generated COLONY pedigree reconstruction software. However, can also accommodate pedigree data sources. combining reconstructed pedigree genetic sample metadata, wpeR creates visual tabular representations pedigree, allowing user interpret pedigree spatial temporal terms. main goal package provide efficient solution analysis complex wild pedigree data help user gain valuable insights genetic relationships within wild animal populations.","code":""},{"path":"https://gr3602.github.io/wpeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Streamlined Analysis of Wild Pedigree Data","text":"","code":"devtools::install_github(\"GR3602/wpeR\")"},{"path":"https://gr3602.github.io/wpeR/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Streamlined Analysis of Wild Pedigree Data","text":"Pedigree import formatting Individual observation timeframe identification Family organization Temporal pedigree visualization Geographic pedigree visualization GIS output Integration R packages","code":""},{"path":"https://gr3602.github.io/wpeR/index.html","id":"input-data","dir":"","previous_headings":"","what":"Input Data","title":"Streamlined Analysis of Wild Pedigree Data","text":"wpeR package requires two main input datasets analysis: Pedigree Genetic samples metadata.","code":""},{"path":"https://gr3602.github.io/wpeR/index.html","id":"basic-workflow","dir":"","previous_headings":"","what":"Basic workflow","title":"Streamlined Analysis of Wild Pedigree Data","text":"EXAMPLE Visualization using kinship2 package  EXAMPLE Using spatial files together ggplot2, basemaps ggsflabel spatial visualization.","code":"####DATA PREPARATION#### # Define the path to the pedigree data file. path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\")  # Retrieve the pedigree data from the get_colony function. ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = \"FamAgg\")   # Get animal timespan data using the anim_timespan() function. animal_ts <- anim_timespan(wolf_samples$AnimalRef,                            wolf_samples$Date,                            wolf_samples$SType,                            dead = c(\"Tissue\"))  # Add animal timespan to the sampledata sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE)  # Organize families and expand pedigree data using the org_fams function. ## families data frame fams <- org_fams(ped_colony, sampledata, output = \"fams\") ## extended pedigree data frame ped <- org_fams(ped_colony,sampledata, output = \"ped\")   # The example show just one family  ## Prepare data for plotting. pt <- plot_table(plot_fams = 1,                  org_tables$fams,                  org_tables$ped,                  sampledata,                  deadSample = c(\"Tissue\"))                    ####VISUALIZATION####                  ## Get a temporal pedigree plot. ped_satplot(plottable = pt) # optional pedigre plot pedigree plot from kinship2 ### extract parent codes parents1 = strsplit(fams[fams$FamID == 1,]$parents, \"_\")[[1]] ### filter the family from pedigre Fam1 = ped[(ped$FamID == 1 | ped$id %in% parents1),] ### plot using kinship2  plot(kinship2::pedigree(Fam1$id, Fam1$father, Fam1$mother, Fam1$sex)) ## Create spatial files <!-- ps <- ped_spatial(pt) --> summary(ps)"},{"path":"https://gr3602.github.io/wpeR/reference/anim_timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dates of individuals first and last sample — anim_timespan","title":"Get dates of individuals first and last sample — anim_timespan","text":"Takes data frame samples returns dates individuals first last sample. Besides functions determines animal dead based predefined sample type eg. tissue.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/anim_timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dates of individuals first and last sample — anim_timespan","text":"","code":"anim_timespan(individual_id, sample_date, sample_type, dead = \"Tissue\")"},{"path":"https://gr3602.github.io/wpeR/reference/anim_timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dates of individuals first and last sample — anim_timespan","text":"individual_id Column dataframe samples containing individual animal identifier code. Defined dataframe$column. sample_date Column dataframe samples containing date sample collection. Must Date format. Defined dataframe$column. sample_type Column dataframe samples containing data type (eg. scat, tissue, saliva) particular sample. Defined dataframe$column. dead Single value vector different lethal sample types. lethal samples included sampledata dead parameter can set FALSE (dead = FALSE). Defaults \"Tissue\".","code":""},{"path":"https://gr3602.github.io/wpeR/reference/anim_timespan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dates of individuals first and last sample — anim_timespan","text":"data frame four columns one row individual_id. Returned data frame columns correspond individual identification key (ID), date first (FirstSeen) last (LastSeen) sample individual logical (TRUE/FALSE) value identifies individual dead (IsDead).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/anim_timespan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dates of individuals first and last sample — anim_timespan","text":"","code":"anim_timespan(   individual_id = wolf_samples$AnimalRef,   sample_date = wolf_samples$Date,   sample_type = wolf_samples$SType,   dead = c(\"Tissue\") ) #>        ID  FirstSeen   LastSeen IsDead #> 1   M10XC 2017-11-16 2017-12-22  FALSE #> 2   M1J47 2019-08-20 2021-01-07  FALSE #> 3   M1YP0 2017-01-25 2017-01-25   TRUE #> 4   M200F 2015-07-27 2018-08-22  FALSE #> 5   M20AM 2016-08-29 2020-08-02  FALSE #> 6   M220J 2017-11-10 2018-02-17  FALSE #> 7   M221C 2018-10-29 2020-05-22  FALSE #> 8   M228J 2016-09-30 2018-02-09   TRUE #> 9   M22AM 2017-01-26 2017-08-07  FALSE #> 10  M273P 2018-01-02 2020-07-22  FALSE #> 11  M2757 2018-01-05 2018-02-09  FALSE #> 12  M2772 2017-11-12 2020-09-29  FALSE #> 13  M28LU 2017-09-18 2021-01-19  FALSE #> 14  M28TU 2017-12-18 2021-04-23  FALSE #> 15  M2ALK 2019-01-03 2020-07-08  FALSE #> 16  M2AM8 2017-04-07 2021-03-23  FALSE #> 17  M2AXE 2017-12-16 2019-11-06  FALSE #> 18  M2C1T 2017-10-31 2018-01-26  FALSE #> 19  M2C8Y 2018-10-30 2018-10-30   TRUE #> 20  M2ETE 2019-03-20 2019-08-13  FALSE #> 21  M2EUJ 2019-04-23 2019-08-11  FALSE #> 22  M2F1L 2019-04-07 2021-03-13  FALSE #> 23 MSV00E 2019-08-12 2021-03-05  FALSE #> 24 MSV018 2019-09-12 2019-09-12  FALSE #> 25 MSV01X 2019-08-28 2019-08-29  FALSE #> 26 MSV02F 2019-10-07 2019-10-07   TRUE #> 27 MSV02L 2019-09-15 2019-09-15   TRUE #> 28 MSV055 2019-12-11 2020-03-24  FALSE #> 29 MSV05L 2020-01-27 2020-02-15  FALSE #> 30 MSV0AL 2019-12-11 2021-04-29  FALSE #> 31 MSV0CK 2019-08-05 2019-12-09  FALSE #> 32 MSV0FK 2020-01-18 2021-04-15  FALSE #> 33 MSV0H5 2020-04-10 2021-03-17  FALSE #> 34 MSV0M6 2020-02-24 2021-04-08  FALSE #> 35 MSV0P7 2019-11-23 2020-07-17  FALSE #> 36 MSV0T4 2020-02-07 2020-02-07   TRUE #> 37 MSV0T7 2019-08-11 2020-02-09   TRUE #> 38 MSV0TA 2020-01-12 2020-01-12   TRUE #> 39 MSV0TJ 2019-12-28 2019-12-28   TRUE #> 40 MSV0UL 2020-07-15 2020-07-15  FALSE #> 41 MSV0UP 2020-06-10 2021-03-17  FALSE #> 42 MSV0UT 2020-06-10 2020-06-10  FALSE #> 43 MSV0UU 2020-06-10 2020-06-10  FALSE #> 44 MSV0X4 2019-09-03 2019-10-23   TRUE #> 45 MSV0XT 2020-10-08 2021-04-29  FALSE #> 46 MSV10T 2020-08-16 2020-08-16  FALSE #> 47 MSV16T 2021-02-02 2021-02-02  FALSE #> 48 MSV16U 2021-02-02 2021-02-02  FALSE #> 49 MSV170 2021-02-02 2021-02-02  FALSE #> 50 MSV177 2020-04-22 2020-07-11  FALSE #> 51 MSV17F 2020-11-08 2020-12-04  FALSE #> 52 MSV17U 2020-09-29 2021-04-29  FALSE #> 53 MSV180 2020-09-29 2020-09-29  FALSE #> 54 MSV18C 2020-11-06 2020-11-06  FALSE #> 55 MSV1C0 2021-02-16 2021-03-30  FALSE #> 56 MSV1EX 2021-01-18 2021-01-18  FALSE #> 57 MSV1F5 2021-01-23 2021-01-23  FALSE #> 58 MSV1F8 2021-02-04 2021-02-04  FALSE #> 59 MSV1FE 2021-02-10 2021-02-10  FALSE #> 60 MSV1FJ 2021-02-16 2021-03-07  FALSE #> 61 MSV1FL 2021-02-17 2021-02-17  FALSE #> 62 MSV1FT 2021-01-18 2021-02-26  FALSE #> 63 MSV1KT 2020-10-06 2021-02-16  FALSE #> 64 MSV1MH 2021-02-25 2021-07-15  FALSE #> 65 MSV1TM 2020-11-15 2020-11-15   TRUE"},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and prepare genetic sample metadata — check_sampledata","title":"Check and prepare genetic sample metadata — check_sampledata","text":"Verifies consistency columns genetic sample metadata prepares use functions wpeR package. function ensures provided data properly formatted conforms standards functions make wpeR package.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and prepare genetic sample metadata — check_sampledata","text":"","code":"check_sampledata(   Sample,   Date,   AnimalRef,   GeneticSex,   lat,   lng,   SType,   extraCols = NULL )"},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and prepare genetic sample metadata — check_sampledata","text":"Sample vector sample unique identifier codes. Date vector sample collection dates 'YYYY-MM-DD' format. AnimalRef vector identifier codes particular individual sample belongs . GeneticSex vector genetic sex information ('F' female, 'M' male, NA unknown). lat vector latitude coordinates WGS84 coordinate system (EPSG: 4326). lng vector longitude coordinates WGS84 coordinate system (EPSG: 4326). SType vector sample types eg.: scat, hair, tissue. extraCols vector extra column names user wants include sampledata data frame (see Details).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and prepare genetic sample metadata — check_sampledata","text":"data frame least 7 columns number rows equal length input vector. column corresponds one input parameters. function executes without warnings errors, result check_sampledata() can used input parameter functions within package: get_colony(), get_ped(), org_fams() plot_table().","code":""},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and prepare genetic sample metadata — check_sampledata","text":"specifying extraCols parameter additional information can included sampledata dataframe. additional information required functioning wpeR package functions, can useful user interpreting results. including additional columns function inputs (Sample, Date, AnimalRef...) defined vector extracted data frame column (eg. Sample = dataframe$column) extraCols parameter defined, vector column names form data frame (eg. extraCols = c(column1, column2, column3)).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/check_sampledata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and prepare genetic sample metadata — check_sampledata","text":"","code":"sampledata <- check_sampledata(   Sample = wolf_samples$Sample,   Date = wolf_samples$Date,   AnimalRef = wolf_samples$AnimalRef,   GeneticSex = wolf_samples$GeneticSex,   lat = wolf_samples$lat,   lng = wolf_samples$lng,   SType = wolf_samples$SType )"},{"path":"https://gr3602.github.io/wpeR/reference/dyn_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get matrix of apparent survival — dyn_matrix","title":"Get matrix of apparent survival — dyn_matrix","text":"Creates matrix shows number captured animals multiple seasons.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/dyn_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get matrix of apparent survival — dyn_matrix","text":"","code":"dyn_matrix(animal_id, capture_date, start_dates, end_dates)"},{"path":"https://gr3602.github.io/wpeR/reference/dyn_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get matrix of apparent survival — dyn_matrix","text":"animal_id column dataframe samples stores individual animal identifier code. capture_date column dataframe samples stores date sample collection. Must Date format. start_dates Vector dates Date format define start season. end_dates Vector dates Date format define end season.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/dyn_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get matrix of apparent survival — dyn_matrix","text":"matrix 1 + . seasons rows columns. diagonal: number new captures session, diagonal: number recaptures season x season y, diagonal: number animals season y skipped season x. Season x defined first row, season y first column. Column Tot. Capts gives detected individuals season y. Row Tot. Skipped gives individuals skipped season x detected later.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/dyn_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get matrix of apparent survival — dyn_matrix","text":"","code":"# Define start and end dates for sampling seasons. seasons <- data.frame(   start = c(     as.Date(\"2017-01-01\"),     as.Date(\"2018-01-01\"),     as.Date(\"2019-01-01\")   ),   end = c(     as.Date(\"2017-12-31\"),     as.Date(\"2018-12-31\"),     as.Date(\"2019-12-31\")   ) )  # Create a dynamics matrix for animal captures. dyn_matrix(   animal_id = wolf_samples$AnimalRef,   capture_date = wolf_samples$Date,   start_dates = seasons$start,   end_dates = seasons$end ) #>                         2017-01-01 - 2017-12-31 2018-01-01 - 2018-12-31 #> 2017-01-01 - 2017-12-31                      13                       8 #> 2018-01-01 - 2018-12-31                       2                       4 #> 2019-01-01 - 2019-12-31                       0                       0 #> Tot. Skipped                                  0                       2 #>                         2019-01-01 - 2019-12-31 Tot. Capts #> 2017-01-01 - 2017-12-31                       6         13 #> 2018-01-01 - 2018-12-31                       6         12 #> 2019-01-01 - 2019-12-31                      17         25 #> Tot. Skipped                                  0         NA"},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":null,"dir":"Reference","previous_headings":"","what":"Organizes COLONY output — get_colony","title":"Organizes COLONY output — get_colony","text":"Extends BestConfig_Ordered output COLONY pedigree reconstruction software additional data individuals included pedigree. function adds missing parents OffspringID, assigns sex individual included OffspringID adds computed probabilities paternity maternity assignments (probability assignments visible parameter set \"table\"). function also prepares data output function can directly analyzed kinship2, pedtools FamAgg packages.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organizes COLONY output — get_colony","text":"","code":"get_colony(   colony_project_path,   sampledata,   rm_obsolete_parents = TRUE,   out = \"FamAgg\" )"},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organizes COLONY output — get_colony","text":"colony_project_path Character string. Path folder COLONY output files saved. include file path project name (see Details). sampledata Data frame. Metadata genetic samples belong individuals included pedigree reconstruction analysis. data frame adhere formatting naming conventions outlined check_sampledata() documentation. rm_obsolete_parents Logical. unknown parents removed output. Applies just offspring parents unknown. Defaults TRUE. Character string. use package output formatted? kinship2 (= \"kinship2\"), pedtools (= \"pedtools\"), FamAgg (= \"FamAgg\") created data.frame can outputted (= \"table\"). Defaults \"FamAgg\"","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organizes COLONY output — get_colony","text":"data frame describing common pedigree structure. individual included pedigree represents one row. Columns describe individual identifier code, identifier code mother father, sex family individual. Column names arrangement depends selected output (parameter).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organizes COLONY output — get_colony","text":"COLONY output tables needed function (.BestConfig_Ordered, .Maternity .Paternity) read directly colony output folder need imported R session. path outputs defined colony_project_path parameter. defining colony_project_path user needs define complete path directory colony outputs stored also file name (file name COLONY outputs equals project name  eg. /path///COLONY/output/folder/COLONY_project_name).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_colony.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organizes COLONY output — get_colony","text":"","code":"# Define the path to COLONY output path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\")  # Get pedigree data in FamAgg format get_colony(     colony_project_path = path,     sampledata = wolf_samples     ) #>    ClusterIndex     id father mother sex #> 1             1  M2AM8   <NA>   <NA>   1 #> 2             1  M273P   <NA>   <NA>   2 #> 3             1  M20AM   <NA>   <NA>   1 #> 4             1  M28TU   <NA>   <NA>   2 #> 5             1  M228J   <NA>   <NA>   1 #> 6             1  M200F   <NA>   <NA>   2 #> 7             1  M10XC  M228J  M200F   1 #> 8             1  M1YP0  M228J  M200F   2 #> 9             1  M220J  M228J  M200F   1 #> 10            1  M22AM  M228J  M200F   1 #> 11            1  M2772  M228J  M200F   1 #> 12            1  M28LU  M228J  M200F   2 #> 13            1  M2AXE  M228J  M200F   2 #> 14            1  M2C1T  M228J  M200F   2 #> 15            1 MSV10T MSV00E  M28LU   2 #> 16            1 MSV1C0 MSV00E  M28LU   1 #> 17            1 MSV1EX MSV00E  M28LU   1 #> 18            1 MSV1F5 MSV00E  M28LU   1 #> 19            1 MSV1F8 MSV00E  M28LU   2 #> 20            1 MSV1FJ MSV00E  M28LU   1 #> 21            1 MSV1FL MSV00E  M28LU   1 #> 22            1 MSV1FT MSV00E  M28LU   1 #> 23            1 MSV1TM MSV00E  M28LU   2 #> 24            1 MSV01X  M2772  M28TU   1 #> 25            1 MSV055  M2772  M28TU   2 #> 26            1 MSV0AL  M2772  M28TU   1 #> 27            1 MSV0TA  M2772  M28TU   1 #> 28            1 MSV0XT  M2772  M28TU   1 #> 29            1 MSV17U  M2772  M28TU   1 #> 30            1 MSV180  M2772  M28TU   2 #> 31            1 MSV18C  M2772  M28TU   2 #> 32            1 MSV1KT  M2772  M28TU   2 #> 33            1  M1J47  M2AM8  M200F   1 #> 34            1  M221C  M2AM8  M200F   2 #> 35            1  M2C8Y  M2AM8  M200F   2 #> 36            1  M2F1L  M2AM8  M200F   2 #> 37            1 MSV02F  M2AM8  M200F   1 #> 38            1 MSV02L  M2AM8  M200F   1 #> 39            1 MSV0CK  M2AM8  M200F   2 #> 40            1 MSV0FK  M2AM8  M200F   1 #> 41            1 MSV0H5  M2AM8  M200F   2 #> 42            1 MSV0P7  M2AM8  M200F   1 #> 43            1 MSV0UP  M2AM8  M200F   2 #> 44            1 MSV0UT  M2AM8  M200F   1 #> 45            1 MSV0UU  M2AM8  M200F   2 #> 46            1 MSV16T  M2AM8  M200F   2 #> 47            1 MSV16U  M2AM8  M200F   1 #> 48            1 MSV170  M2AM8  M200F   1 #> 49            1 MSV177  M2AM8  M200F   2 #> 50            1 MSV1FE  M2AM8  M200F   1 #> 51            1  M2757  M20AM  M273P   2 #> 52            1  M2ALK  M20AM  M273P   2 #> 53            1  M2ETE  M20AM  M273P   2 #> 54            1  M2EUJ  M20AM  M273P   2 #> 55            1 MSV00E  M20AM  M273P   1 #> 56            1 MSV018  M20AM  M273P   1 #> 57            1 MSV05L  M20AM  M273P   1 #> 58            1 MSV0M6  M20AM  M273P   1 #> 59            1 MSV0T4  M20AM  M273P   1 #> 60            1 MSV0T7  M20AM  M273P   1 #> 61            1 MSV0TJ  M20AM  M273P   2 #> 62            1 MSV0UL  M20AM  M273P   1 #> 63            1 MSV0X4  M20AM  M273P   1 #> 64            1 MSV17F  M20AM  M273P   2 #> 65            1 MSV1MH  M20AM  M273P   2"},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":null,"dir":"Reference","previous_headings":"","what":"Organizes pedigree data — get_ped","title":"Organizes pedigree data — get_ped","text":"Offers alternative get_colony() function cases pedigree reconstructed COLONY software. takes pedigree dataframe assigns sex individual. function also prepares data output function can directly analyzed kinship2, pedtools FamAgg packages.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organizes pedigree data — get_ped","text":"","code":"get_ped(ped, sampledata, out = \"FamAgg\")"},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organizes pedigree data — get_ped","text":"ped Data frame. Pedigree data frame basic structure. Three columns corresponding offspring, father mother (see Details). Unknown parents represented NA values. sampledata Data frame. Metadata genetic samples belong individuals included pedigree reconstruction analysis. data frame adhere formatting naming conventions outlined check_sampledata() documentation. Character string. use package output formatted? kinship2 (= \"kinship2\"), pedtools (= \"pedtools\") FamAgg (= \"FamAgg\") created data.frame can outputted (= \"table\"). Defaults \"FamAgg\"","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organizes pedigree data — get_ped","text":"data frame describing common pedigree structure. individual included pedigree represents one row. Columns describe individual identifier code, identifier code mother father sex individual. Column names arrangement depends selected output (parameter).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organizes pedigree data — get_ped","text":"custom pedigree specified ped parameter mirror structure COLONY pedigree share column names. consist three columns offspring: OffspringID, FatherID, MotherID. considering unknown parents represented NA values.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/get_ped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organizes pedigree data — get_ped","text":"","code":"#example pedigree dataframe ped <- data.frame(   OffspringID = c(     \"M273P\", \"M20AM\", \"M2757\", \"M2ALK\", \"M2ETE\", \"M2EUJ\", \"MSV00E\",     \"MSV018\", \"MSV05L\", \"MSV0M6\", \"MSV0T4\", \"MSV0T7\", \"MSV0TJ\", \"MSV0UL\"   ),   FatherID = c(     NA, NA, \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\",     \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\", \"M20AM\"   ),   MotherID = c(     NA, NA, \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\",     \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\", \"M273P\"   ) ) #Get pedigree data in FamAgg format get_ped(     ped = ped,     sampledata = wolf_samples     ) #>        id father mother sex #> 1   M273P   <NA>   <NA>   2 #> 2   M20AM   <NA>   <NA>   1 #> 3   M2757  M20AM  M273P   2 #> 4   M2ALK  M20AM  M273P   2 #> 5   M2ETE  M20AM  M273P   2 #> 6   M2EUJ  M20AM  M273P   2 #> 7  MSV00E  M20AM  M273P   1 #> 8  MSV018  M20AM  M273P   1 #> 9  MSV05L  M20AM  M273P   1 #> 10 MSV0M6  M20AM  M273P   1 #> 11 MSV0T4  M20AM  M273P   1 #> 12 MSV0T7  M20AM  M273P   1 #> 13 MSV0TJ  M20AM  M273P   2 #> 14 MSV0UL  M20AM  M273P   1"},{"path":"https://gr3602.github.io/wpeR/reference/nbtw_seasons.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of detected animals between two sampling seasons — nbtw_seasons","title":"Number of detected animals between two sampling seasons — nbtw_seasons","text":"Gives numeric overview individuals captured within second sampling season compared tho first one.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/nbtw_seasons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of detected animals between two sampling seasons — nbtw_seasons","text":"","code":"nbtw_seasons(   animal_id,   capture_date,   season1_start,   season1_end,   season2_start,   season2_end )"},{"path":"https://gr3602.github.io/wpeR/reference/nbtw_seasons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of detected animals between two sampling seasons — nbtw_seasons","text":"animal_id column dataframe samples stores individual animal identifier code. capture_date column dataframe samples stores date sample collection. Must Date format. season1_start String Date format. Start fist capture season. Start end date included capture season. season1_end String Date format. End fist capture season. Start end date included capture season. season2_start String Date format. Start second capture season. Start end date included capture season. season2_end String Date format. End second capture season. Start end date included capture season.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/nbtw_seasons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of detected animals between two sampling seasons — nbtw_seasons","text":"data frame one row six columns corresponding season 1 2 start end dates, number detected animals season 2 (total_cap), number new detentions season 2 (new_captures), umber animals season 1 detected within season 2 (recaptured) number individuals skipped season 2 detected end season (skipped).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/nbtw_seasons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of detected animals between two sampling seasons — nbtw_seasons","text":"","code":"# Calculate the number of animals detected between two sampling seasons. nbtw_seasons(  animal_id = wolf_samples$AnimalRef,  capture_date = wolf_samples$Date,  season1_start = as.Date(\"2017-01-01\"),  season1_end = as.Date(\"2017-12-31\"),  season2_start = as.Date(\"2018-01-01\"),  season2_end = as.Date(\"2018-12-31\") ) #>                   season1                 season2 total_cap new_captures #> 1 2017-01-01 - 2017-12-31 2018-01-01 - 2018-12-31        12            4 #>   recaptures skipped #> 1          8       2"},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize animals into families and expand pedigree data — org_fams","title":"Organize animals into families and expand pedigree data — org_fams","text":"Takes pedigree data get_colony() get_ped() function groups animals families. also expands pedigree data adding information family individual born family individual reproductive animal.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize animals into families and expand pedigree data — org_fams","text":"","code":"org_fams(ped, sampledata, output = \"both\")"},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize animals into families and expand pedigree data — org_fams","text":"ped Data frame. FamAgg output get_colony() get_ped() function. rm_obsolete_parents parameter set TRUE. sampledata Data frame. Metadata genetic samples belong individuals included pedigree reconstruction analysis. data frame adhere formatting naming conventions outlined check_sampledata() documentation. output Character string. Determines format output. Options : \"ped\": returns extended pedigree data frame. \"fams\": returns table families present pedigree. \"\": returns list two data frames: \"ped\" \"fams\". (Default)","code":""},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize animals into families and expand pedigree data — org_fams","text":"Depending output parameter, function returns either data frame (ped fams) list containing data frames (ped fams). ped data frame. extended version pedigree data get_colony()/get_ped(). addition common pedigree information (individual, mother, father, sex, family), ped includes columns : parents: Identifier codes parents separated _. FamID: Numeric identifier family individual belongs (see fams ). FirstSeen: Date first sample individual. LastSeen: Date last sample individual. IsDead: Logical value (TRUE/FALSE) identifies individual dead. DadHSgroup: Identifier paternal half-sib group (see Details). MomHSgroup: Identifier maternal half-sib group (see Details). hsGroup: Numeric value indicating individual part half-sib group (see Details). fams data frame includes information families individuals pedigree belong . families described : parents: Identifier codes parents separated _. father: Identifier code father. mother: Identifier code mother. FamID: Numeric identifier family. famStart: Date first sample one offspring family collected (see Details). famEnd: Date last sample mother father family collected (see Details). FamDead: Logical value (TRUE/FALSE) indicating family longer exists. DadHSgroup: Identifier connecting families share father. MomHSgroup: Identifier connecting families share mother. hsGroup: Numeric value connecting families share one parents.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organize animals into families and expand pedigree data — org_fams","text":"result org_fams() function introduces us two important concepts within context package: family half-sib group. family output function defined group animals least one parent least one offspring known. half-sib group refers group half-siblings, either maternally paternally related. function output DadHSgroup groups paternal half-siblings MomHSgroup maternal half-siblings. fams output dataframe contains famStart famEnd columns, estimate time window family based solely sample collection dates provided sampledata. famStart marks date earliest sample collected offspring belonging family. famEnd indicates date latest sample collected either mother father family. important recognize method relies observation (sampling) times. Consequently, famEnd (last parental sample date) can precede famStart (first offspring sample date), creating biologically impossible sequence negative calculated family timespan. Users interpret interval famStart famEnd understanding.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/org_fams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize animals into families and expand pedigree data — org_fams","text":"","code":"# Prepare the data for usage with org_fams() function. # Get animal timespan data using the anim_timespan() function. animal_ts <- anim_timespan(   wolf_samples$AnimalRef,   wolf_samples$Date,   wolf_samples$SType,   dead = c(\"Tissue\") ) # Add animal timespan to the sampledata sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE) # Define the path to the pedigree data file. path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\") # Retrieve the pedigree data from the get_colony function. ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = \"FamAgg\")  # Run the function # Organize families and expand pedigree data using the org_fams function. org_fams(     ped = ped_colony,     sampledata = sampledata     ) #> $ped #>    ClusterIndex     id father mother sex      parents FamID  FirstSeen #> 1             1  M2AM8   <NA>   <NA>   1         <NA>     0 2017-04-07 #> 2             1  M273P   <NA>   <NA>   2         <NA>     0 2018-01-02 #> 3             1  M20AM   <NA>   <NA>   1         <NA>     0 2016-08-29 #> 4             1  M28TU   <NA>   <NA>   2         <NA>     0 2017-12-18 #> 5             1  M228J   <NA>   <NA>   1         <NA>     0 2016-09-30 #> 6             1  M200F   <NA>   <NA>   2         <NA>     0 2015-07-27 #> 7             1  M10XC  M228J  M200F   1  M228J_M200F     1 2017-11-16 #> 8             1  M1YP0  M228J  M200F   2  M228J_M200F     1 2017-01-25 #> 9             1  M220J  M228J  M200F   1  M228J_M200F     1 2017-11-10 #> 10            1  M22AM  M228J  M200F   1  M228J_M200F     1 2017-01-26 #> 11            1  M2772  M228J  M200F   1  M228J_M200F     1 2017-11-12 #> 12            1  M28LU  M228J  M200F   2  M228J_M200F     1 2017-09-18 #> 13            1  M2AXE  M228J  M200F   2  M228J_M200F     1 2017-12-16 #> 14            1  M2C1T  M228J  M200F   2  M228J_M200F     1 2017-10-31 #> 15            1 MSV10T MSV00E  M28LU   2 MSV00E_M28LU     2 2020-08-16 #> 16            1 MSV1C0 MSV00E  M28LU   1 MSV00E_M28LU     2 2021-02-16 #> 17            1 MSV1EX MSV00E  M28LU   1 MSV00E_M28LU     2 2021-01-18 #> 18            1 MSV1F5 MSV00E  M28LU   1 MSV00E_M28LU     2 2021-01-23 #> 19            1 MSV1F8 MSV00E  M28LU   2 MSV00E_M28LU     2 2021-02-04 #> 20            1 MSV1FJ MSV00E  M28LU   1 MSV00E_M28LU     2 2021-02-16 #> 21            1 MSV1FL MSV00E  M28LU   1 MSV00E_M28LU     2 2021-02-17 #> 22            1 MSV1FT MSV00E  M28LU   1 MSV00E_M28LU     2 2021-01-18 #> 23            1 MSV1TM MSV00E  M28LU   2 MSV00E_M28LU     2 2020-11-15 #> 24            1 MSV01X  M2772  M28TU   1  M2772_M28TU     3 2019-08-28 #> 25            1 MSV055  M2772  M28TU   2  M2772_M28TU     3 2019-12-11 #> 26            1 MSV0AL  M2772  M28TU   1  M2772_M28TU     3 2019-12-11 #> 27            1 MSV0TA  M2772  M28TU   1  M2772_M28TU     3 2020-01-12 #> 28            1 MSV0XT  M2772  M28TU   1  M2772_M28TU     3 2020-10-08 #> 29            1 MSV17U  M2772  M28TU   1  M2772_M28TU     3 2020-09-29 #> 30            1 MSV180  M2772  M28TU   2  M2772_M28TU     3 2020-09-29 #> 31            1 MSV18C  M2772  M28TU   2  M2772_M28TU     3 2020-11-06 #> 32            1 MSV1KT  M2772  M28TU   2  M2772_M28TU     3 2020-10-06 #> 33            1  M1J47  M2AM8  M200F   1  M2AM8_M200F     4 2019-08-20 #> 34            1  M221C  M2AM8  M200F   2  M2AM8_M200F     4 2018-10-29 #> 35            1  M2C8Y  M2AM8  M200F   2  M2AM8_M200F     4 2018-10-30 #> 36            1  M2F1L  M2AM8  M200F   2  M2AM8_M200F     4 2019-04-07 #> 37            1 MSV02F  M2AM8  M200F   1  M2AM8_M200F     4 2019-10-07 #> 38            1 MSV02L  M2AM8  M200F   1  M2AM8_M200F     4 2019-09-15 #> 39            1 MSV0CK  M2AM8  M200F   2  M2AM8_M200F     4 2019-08-05 #> 40            1 MSV0FK  M2AM8  M200F   1  M2AM8_M200F     4 2020-01-18 #> 41            1 MSV0H5  M2AM8  M200F   2  M2AM8_M200F     4 2020-04-10 #> 42            1 MSV0P7  M2AM8  M200F   1  M2AM8_M200F     4 2019-11-23 #> 43            1 MSV0UP  M2AM8  M200F   2  M2AM8_M200F     4 2020-06-10 #> 44            1 MSV0UT  M2AM8  M200F   1  M2AM8_M200F     4 2020-06-10 #> 45            1 MSV0UU  M2AM8  M200F   2  M2AM8_M200F     4 2020-06-10 #> 46            1 MSV16T  M2AM8  M200F   2  M2AM8_M200F     4 2021-02-02 #> 47            1 MSV16U  M2AM8  M200F   1  M2AM8_M200F     4 2021-02-02 #> 48            1 MSV170  M2AM8  M200F   1  M2AM8_M200F     4 2021-02-02 #> 49            1 MSV177  M2AM8  M200F   2  M2AM8_M200F     4 2020-04-22 #> 50            1 MSV1FE  M2AM8  M200F   1  M2AM8_M200F     4 2021-02-10 #> 51            1  M2757  M20AM  M273P   2  M20AM_M273P     5 2018-01-05 #> 52            1  M2ALK  M20AM  M273P   2  M20AM_M273P     5 2019-01-03 #> 53            1  M2ETE  M20AM  M273P   2  M20AM_M273P     5 2019-03-20 #> 54            1  M2EUJ  M20AM  M273P   2  M20AM_M273P     5 2019-04-23 #> 55            1 MSV00E  M20AM  M273P   1  M20AM_M273P     5 2019-08-12 #> 56            1 MSV018  M20AM  M273P   1  M20AM_M273P     5 2019-09-12 #> 57            1 MSV05L  M20AM  M273P   1  M20AM_M273P     5 2020-01-27 #> 58            1 MSV0M6  M20AM  M273P   1  M20AM_M273P     5 2020-02-24 #> 59            1 MSV0T4  M20AM  M273P   1  M20AM_M273P     5 2020-02-07 #> 60            1 MSV0T7  M20AM  M273P   1  M20AM_M273P     5 2019-08-11 #> 61            1 MSV0TJ  M20AM  M273P   2  M20AM_M273P     5 2019-12-28 #> 62            1 MSV0UL  M20AM  M273P   1  M20AM_M273P     5 2020-07-15 #> 63            1 MSV0X4  M20AM  M273P   1  M20AM_M273P     5 2019-09-03 #> 64            1 MSV17F  M20AM  M273P   2  M20AM_M273P     5 2020-11-08 #> 65            1 MSV1MH  M20AM  M273P   2  M20AM_M273P     5 2021-02-25 #>      LastSeen IsDead DadHSgroup MomHSgroup hsGroup #> 1  2021-03-23  FALSE       <NA>       <NA>       0 #> 2  2020-07-22  FALSE       <NA>       <NA>       0 #> 3  2020-08-02  FALSE       <NA>       <NA>       0 #> 4  2021-04-23  FALSE       <NA>       <NA>       0 #> 5  2018-02-09   TRUE       <NA>       <NA>       0 #> 6  2018-08-22  FALSE       <NA>       <NA>       0 #> 7  2017-12-22  FALSE       <NA>     MomP_1       1 #> 8  2017-01-25   TRUE       <NA>     MomP_1       1 #> 9  2018-02-17  FALSE       <NA>     MomP_1       1 #> 10 2017-08-07  FALSE       <NA>     MomP_1       1 #> 11 2020-09-29  FALSE       <NA>     MomP_1       1 #> 12 2021-01-19  FALSE       <NA>     MomP_1       1 #> 13 2019-11-06  FALSE       <NA>     MomP_1       1 #> 14 2018-01-26  FALSE       <NA>     MomP_1       1 #> 15 2020-08-16  FALSE       <NA>       <NA>       2 #> 16 2021-03-30  FALSE       <NA>       <NA>       2 #> 17 2021-01-18  FALSE       <NA>       <NA>       2 #> 18 2021-01-23  FALSE       <NA>       <NA>       2 #> 19 2021-02-04  FALSE       <NA>       <NA>       2 #> 20 2021-03-07  FALSE       <NA>       <NA>       2 #> 21 2021-02-17  FALSE       <NA>       <NA>       2 #> 22 2021-02-26  FALSE       <NA>       <NA>       2 #> 23 2020-11-15   TRUE       <NA>       <NA>       2 #> 24 2019-08-29  FALSE       <NA>       <NA>       3 #> 25 2020-03-24  FALSE       <NA>       <NA>       3 #> 26 2021-04-29  FALSE       <NA>       <NA>       3 #> 27 2020-01-12   TRUE       <NA>       <NA>       3 #> 28 2021-04-29  FALSE       <NA>       <NA>       3 #> 29 2021-04-29  FALSE       <NA>       <NA>       3 #> 30 2020-09-29  FALSE       <NA>       <NA>       3 #> 31 2020-11-06  FALSE       <NA>       <NA>       3 #> 32 2021-02-16  FALSE       <NA>       <NA>       3 #> 33 2021-01-07  FALSE       <NA>     MomP_1       1 #> 34 2020-05-22  FALSE       <NA>     MomP_1       1 #> 35 2018-10-30   TRUE       <NA>     MomP_1       1 #> 36 2021-03-13  FALSE       <NA>     MomP_1       1 #> 37 2019-10-07   TRUE       <NA>     MomP_1       1 #> 38 2019-09-15   TRUE       <NA>     MomP_1       1 #> 39 2019-12-09  FALSE       <NA>     MomP_1       1 #> 40 2021-04-15  FALSE       <NA>     MomP_1       1 #> 41 2021-03-17  FALSE       <NA>     MomP_1       1 #> 42 2020-07-17  FALSE       <NA>     MomP_1       1 #> 43 2021-03-17  FALSE       <NA>     MomP_1       1 #> 44 2020-06-10  FALSE       <NA>     MomP_1       1 #> 45 2020-06-10  FALSE       <NA>     MomP_1       1 #> 46 2021-02-02  FALSE       <NA>     MomP_1       1 #> 47 2021-02-02  FALSE       <NA>     MomP_1       1 #> 48 2021-02-02  FALSE       <NA>     MomP_1       1 #> 49 2020-07-11  FALSE       <NA>     MomP_1       1 #> 50 2021-02-10  FALSE       <NA>     MomP_1       1 #> 51 2018-02-09  FALSE       <NA>       <NA>       4 #> 52 2020-07-08  FALSE       <NA>       <NA>       4 #> 53 2019-08-13  FALSE       <NA>       <NA>       4 #> 54 2019-08-11  FALSE       <NA>       <NA>       4 #> 55 2021-03-05  FALSE       <NA>       <NA>       4 #> 56 2019-09-12  FALSE       <NA>       <NA>       4 #> 57 2020-02-15  FALSE       <NA>       <NA>       4 #> 58 2021-04-08  FALSE       <NA>       <NA>       4 #> 59 2020-02-07   TRUE       <NA>       <NA>       4 #> 60 2020-02-09   TRUE       <NA>       <NA>       4 #> 61 2019-12-28   TRUE       <NA>       <NA>       4 #> 62 2020-07-15  FALSE       <NA>       <NA>       4 #> 63 2019-10-23   TRUE       <NA>       <NA>       4 #> 64 2020-12-04  FALSE       <NA>       <NA>       4 #> 65 2021-07-15  FALSE       <NA>       <NA>       4 #>  #> $fams #>         parents   father   mother FamID   FamStart     FamEnd FamDead #> 7   M228J_M200F    M228J    M200F     1 2017-01-25 2018-08-22    TRUE #> 15 MSV00E_M28LU   MSV00E    M28LU     2 2020-08-16 2021-03-05   FALSE #> 24  M2772_M28TU    M2772    M28TU     3 2019-08-28 2021-04-23   FALSE #> 33  M2AM8_M200F    M2AM8    M200F     4 2018-10-29 2021-03-23   FALSE #> 51  M20AM_M273P    M20AM    M273P     5 2018-01-05 2020-08-02   FALSE #> NA      Unknown *Unknown #Unknown     0 2015-07-27 2021-04-23   FALSE #>    DadHSgroup MomHSgroup hsGroup #> 7        <NA>     MomP_1       1 #> 15       <NA>       <NA>       2 #> 24       <NA>       <NA>       3 #> 33       <NA>     MomP_1       1 #> 51       <NA>       <NA>       4 #> NA       <NA>       <NA>       0 #>"},{"path":"https://gr3602.github.io/wpeR/reference/ped_satplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal plot of pedigree — ped_satplot","title":"Temporal plot of pedigree — ped_satplot","text":"Creates \"capture\" history plot individuals arranged families included data frame created plot_table() function.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_satplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal plot of pedigree — ped_satplot","text":"","code":"ped_satplot(   plottable,   famSpacing = 2,   hsGroupSpacing = 2,   xWhiteSpace = 100,   xlabel = \"Date\",   ylabel = \"Animal\",   title = \"\",   subtitle = \"\",   LegendLabel = \"Sex\",   xlegend = 0.2,   ylegend = 0.94,   text_size = 2.5,   fam_label_size = 2 )"},{"path":"https://gr3602.github.io/wpeR/reference/ped_satplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal plot of pedigree — ped_satplot","text":"plottable Data frame. Output plot_table() function. famSpacing Y-axis spacing families. even number! hsGroupSpacing Y-axis spacing half-sib groups. even number! xWhiteSpace Spacing X-axis beginning end plot. xlabel X-axis label. ylabel Y-axis label. title Plot title. subtitle Plot subtitle. LegendLabel Title legend. xlegend Horizontal position legend. ylegend Vertical position legend. text_size Plot text size. fam_label_size Family label text size.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_satplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal plot of pedigree — ped_satplot","text":"graphical representation detected family members trough time.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_satplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal plot of pedigree — ped_satplot","text":"","code":"# Prepare the data for usage with plot_table() function. # Get animal timespan data using the anim_timespan() function. animal_ts <- anim_timespan(wolf_samples$AnimalRef,   wolf_samples$Date,   wolf_samples$SType,   dead = c(\"Tissue\") ) # Add animal timespan to the sampledata sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE) # Define the path to the pedigree data file. path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\") # Retrieve the pedigree data from the get_colony function. ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = \"FamAgg\") # Organize families and expand pedigree data using the org_fams function. org_tables <- org_fams(ped_colony, sampledata, output = \"both\") # Prepare data for plotting. pt <- plot_table(plot_fams = 1,   org_tables$fams,   org_tables$ped,   sampledata,   deadSample = c(\"Tissue\") )  # Run the function. # Get a temporal pedigree plot. ped_satplot(plottable = pt)"},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files for spatial representation of pedigree — ped_spatial","title":"Get files for spatial representation of pedigree — ped_spatial","text":"Creates georeferenced data spatial pedigree representation form output plot_table() function.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files for spatial representation of pedigree — ped_spatial","text":"","code":"ped_spatial(   plottable,   na.rm = TRUE,   output = \"list\",   fullsibdata = NULL,   sibthreshold = 0,   path = \"\",   filename = \"\",   out.format = \"geopackage\",   time.limits = c(as.Date(\"1900-01-01\"), as.Date(\"2100-01-01\")),   time.limit.rep = FALSE,   time.limit.offspring = FALSE,   time.limit.moves = FALSE )"},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files for spatial representation of pedigree — ped_spatial","text":"plottable Data frame. Output plot_table() function. na.rm Logical (TRUE/FALSE). Remove samples missing coordinates /dates. output Character vector specifying desired output type ('list' - default 'gis'). Available outputs: list: spatial data returned list, gis: spatial data returned georeferenced files. fullsibdata Data frame COLONY full-sibling data. sibthreshold Numeric. P-value threshold sibship assignment. path System path storing georeferenced files. filename Common name georeferenced files. .format Character string. Type georeferenced files generated. Can ether \"geopackage\" \"shapefile\". Default \"geopackage\" time.limits Vector two Date values time window. time.limit.rep Logical (TRUE/FALSE). Apply time limits reference samples reproductive animals. time.limit.offspring Logical (TRUE/FALSE). Apply time limits reference samples offspring. time.limit.moves Logical (TRUE/FALSE). Apply time limits movement data.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files for spatial representation of pedigree — ped_spatial","text":"Depending output parameter function can return list sf objects, georeferenced vector data files . objects created separately mothers, fathers offspring, include: Reference Points (motherRpoints, fatherRpoints, offspringRpoints). point corresponds animal included 'plot_table()' function output. reproductive animals (mothers fathers), reference point location last sample within specified time window. offspring, reference point location first sample within time window. Movement Points (motherMovePoints, fatherMovePoints, offspringMovePoints). points represent samples respective animals. Movement Lines (motherMoveLines, fatherMoveLines offspringMoveLines). Movement lines connect '...MovePoints' specific animal chronological order. Movement Polygons (motherMovePolygons, fatherMovePolygons offspringMovePolygons): Movement polygons represent convex hull encloses samples individual. individual must two samples representation. Besides function also produces lines connect mothers offspring (maternityLines), fathers offspring (paternityLines), fullsibdata parameter specified, full siblings (FullsibLines).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get files for spatial representation of pedigree — ped_spatial","text":"parameters path, filename .format, used output parameter set \"gis\", since control georeferenced files created, saved common file name .","code":""},{"path":"https://gr3602.github.io/wpeR/reference/ped_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get files for spatial representation of pedigree — ped_spatial","text":"","code":"# Prepare the data for usage with ped_spatial() function. # Get animal timespan data using the anim_timespan() function. animal_ts <- anim_timespan(wolf_samples$AnimalRef,   wolf_samples$Date,   wolf_samples$SType,   dead = c(\"Tissue\") ) # Add animal timespan to the sampledata sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE) # Define the path to the pedigree data file. path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\") # Retrieve the pedigree data from the get_colony function. ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = \"FamAgg\") # Organize families and expand pedigree data using the org_fams function. org_tables <- org_fams(ped_colony, sampledata, output = \"both\") # Prepare data for plotting. pt <- plot_table(plot_fams = 1,   org_tables$fams,   org_tables$ped,   sampledata,   deadSample = c(\"Tissue\") )  # Run the function # Get files for spatial pedigree representation in list format. ped_spatial(plottable = pt) #> $motherRpoints #> Simple feature collection with 1 feature and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 14.14495 ymin: 45.71833 xmax: 14.14495 ymax: 45.71833 #> Geodetic CRS:  WGS 84 #>    Sample AnimalRef GeneticSex       Date SType  FirstSeen   LastSeen IsDead #> 20  M2AMA     M200F          F 2018-08-22  Scat 2015-07-27 2018-08-22  FALSE #>     rep later_rep isPolygamous  dead first_sample last_sample IsReference #> 20 TRUE     FALSE         TRUE FALSE        FALSE        TRUE       FALSE #>                     geometry #> 20 POINT (14.14495 45.71833) #>  #> $fatherRpoints #> Simple feature collection with 1 feature and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 14.15404 ymin: 45.67033 xmax: 14.15404 ymax: 45.67033 #> Geodetic CRS:  WGS 84 #>    Sample AnimalRef GeneticSex       Date  SType  FirstSeen   LastSeen IsDead #> 58  M2C36     M228J          M 2018-02-09 Tissue 2016-09-30 2018-02-09   TRUE #>     rep later_rep isPolygamous dead first_sample last_sample IsReference #> 58 TRUE     FALSE        FALSE TRUE        FALSE        TRUE       FALSE #>                     geometry #> 58 POINT (14.15404 45.67033) #>  #> $offspringRpoints #> Simple feature collection with 8 features and 18 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 14.04242 ymin: 45.67397 xmax: 14.1563 ymax: 45.71845 #> Geodetic CRS:  WGS 84 #>     Sample AnimalRef GeneticSex       Date  SType  FirstSeen   LastSeen IsDead #> 1    M10XC     M10XC          M 2017-11-16   Scat 2017-11-16 2017-12-22  FALSE #> 8    M1XA7     M1YP0          F 2017-01-25   Scat 2017-01-25 2017-01-25   TRUE #> 43   M2C2F     M220J          M 2017-11-10 Saliva 2017-11-10 2018-02-17  FALSE #> 59   M22AM     M22AM          M 2017-01-26   Scat 2017-01-26 2017-08-07  FALSE #> 71   M2772     M2772          M 2017-11-12   Scat 2017-11-12 2020-09-29  FALSE #> 77   M28LU     M28LU          F 2017-09-18 Saliva 2017-09-18 2021-01-19  FALSE #> 125  M275E     M2AXE          F 2017-12-16   Scat 2017-12-16 2019-11-06  FALSE #> 131  M277F     M2C1T          F 2017-10-31   Scat 2017-10-31 2018-01-26  FALSE #>     plottingID FamID hsGroup   rep later_rep isPolygamous  dead first_sample #> 1            3     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 8            4     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 43           5     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 59           6     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 71           7     1       1 FALSE      TRUE        FALSE FALSE         TRUE #> 77           8     1       1 FALSE      TRUE        FALSE FALSE         TRUE #> 125          9     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 131         10     1       1 FALSE     FALSE        FALSE FALSE         TRUE #>     last_sample IsReference                  geometry #> 1         FALSE        TRUE POINT (14.12922 45.70766) #> 8         FALSE       FALSE POINT (14.12954 45.71845) #> 43        FALSE       FALSE  POINT (14.04242 45.7131) #> 59        FALSE        TRUE POINT (14.12501 45.70004) #> 71        FALSE        TRUE  POINT (14.1563 45.69639) #> 77        FALSE        TRUE POINT (14.11112 45.67397) #> 125       FALSE       FALSE POINT (14.14771 45.71293) #> 131       FALSE       FALSE  POINT (14.1357 45.71323) #>  #> $motherMovePoints #> Simple feature collection with 11 features and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 14.03169 ymin: 45.68138 xmax: 14.14653 ymax: 45.7525 #> Geodetic CRS:  WGS 84 #> First 10 features: #>     Sample AnimalRef GeneticSex       Date  SType  FirstSeen   LastSeen IsDead #> 10 EX.1JH0     M200F          F 2015-07-27 Saliva 2015-07-27 2018-08-22  FALSE #> 11 EX.1JJ5     M200F          F 2015-08-14 Saliva 2015-07-27 2018-08-22  FALSE #> 12   M20A4     M200F          F 2016-10-11 Saliva 2015-07-27 2018-08-22  FALSE #> 13   M200F     M200F          F 2017-01-11   Scat 2015-07-27 2018-08-22  FALSE #> 14   M1TU6     M200F          F 2017-01-25   Scat 2015-07-27 2018-08-22  FALSE #> 15   M1XPY     M200F          F 2017-01-25   Scat 2015-07-27 2018-08-22  FALSE #> 16   M1YH8     M200F          F 2017-03-20   Scat 2015-07-27 2018-08-22  FALSE #> 17   M1T7L     M200F          F 2017-04-21   Scat 2015-07-27 2018-08-22  FALSE #> 18   M2ATF     M200F          F 2018-07-04   Scat 2015-07-27 2018-08-22  FALSE #> 19   M2ATC     M200F          F 2018-07-19   Scat 2015-07-27 2018-08-22  FALSE #>     rep later_rep isPolygamous  dead first_sample last_sample IsReference #> 10 TRUE     FALSE         TRUE FALSE         TRUE       FALSE       FALSE #> 11 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 12 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 13 TRUE     FALSE         TRUE FALSE        FALSE       FALSE        TRUE #> 14 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 15 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 16 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 17 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 18 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #> 19 TRUE     FALSE         TRUE FALSE        FALSE       FALSE       FALSE #>                     geometry #> 10  POINT (14.14653 45.7525) #> 11 POINT (14.03169 45.69501) #> 12 POINT (14.04434 45.71347) #> 13 POINT (14.08802 45.71602) #> 14 POINT (14.12843 45.69746) #> 15 POINT (14.08937 45.71062) #> 16 POINT (14.07037 45.70856) #> 17 POINT (14.11843 45.68138) #> 18 POINT (14.07282 45.70502) #> 19 POINT (14.09111 45.70253) #>  #> $fatherMovePoints #> Simple feature collection with 5 features and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 14.01201 ymin: 45.67033 xmax: 14.15404 ymax: 45.7114 #> Geodetic CRS:  WGS 84 #>    Sample AnimalRef GeneticSex       Date  SType  FirstSeen   LastSeen IsDead #> 54  M20AP     M228J          M 2016-09-30 Saliva 2016-09-30 2018-02-09   TRUE #> 55  M228J     M228J          M 2017-01-26   Scat 2016-09-30 2018-02-09   TRUE #> 56  M28ML     M228J          M 2017-08-18 Saliva 2016-09-30 2018-02-09   TRUE #> 57  M28MM     M228J          M 2017-08-18 Saliva 2016-09-30 2018-02-09   TRUE #> 58  M2C36     M228J          M 2018-02-09 Tissue 2016-09-30 2018-02-09   TRUE #>     rep later_rep isPolygamous  dead first_sample last_sample IsReference #> 54 TRUE     FALSE        FALSE FALSE         TRUE       FALSE       FALSE #> 55 TRUE     FALSE        FALSE FALSE        FALSE       FALSE        TRUE #> 56 TRUE     FALSE        FALSE FALSE        FALSE       FALSE       FALSE #> 57 TRUE     FALSE        FALSE FALSE        FALSE       FALSE       FALSE #> 58 TRUE     FALSE        FALSE  TRUE        FALSE        TRUE       FALSE #>                     geometry #> 54  POINT (14.01201 45.7114) #> 55 POINT (14.12798 45.70406) #> 56  POINT (14.1115 45.67397) #> 57  POINT (14.1115 45.67397) #> 58 POINT (14.15404 45.67033) #>  #> $offspringMovePoints #> Simple feature collection with 35 features and 18 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.80997 ymin: 45.52787 xmax: 14.39713 ymax: 46.28649 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    Sample AnimalRef GeneticSex       Date  SType  FirstSeen   LastSeen IsDead #> 1   M10XC     M10XC          M 2017-11-16   Scat 2017-11-16 2017-12-22  FALSE #> 2   M0PXH     M10XC          M 2017-11-22   Scat 2017-11-16 2017-12-22  FALSE #> 3   M0PFL     M10XC          M 2017-12-22   Scat 2017-11-16 2017-12-22  FALSE #> 8   M1XA7     M1YP0          F 2017-01-25   Scat 2017-01-25 2017-01-25   TRUE #> 9   M1YP0     M1YP0          F 2017-01-25 Tissue 2017-01-25 2017-01-25   TRUE #> 43  M2C2F     M220J          M 2017-11-10 Saliva 2017-11-10 2018-02-17  FALSE #> 44  M220J     M220J          M 2018-02-17   Scat 2017-11-10 2018-02-17  FALSE #> 59  M22AM     M22AM          M 2017-01-26   Scat 2017-01-26 2017-08-07  FALSE #> 60  M28MF     M22AM          M 2017-08-07 Saliva 2017-01-26 2017-08-07  FALSE #> 71  M2772     M2772          M 2017-11-12   Scat 2017-11-12 2020-09-29  FALSE #>    plottingID FamID hsGroup   rep later_rep isPolygamous  dead first_sample #> 1           3     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 2           3     1       1 FALSE     FALSE        FALSE FALSE        FALSE #> 3           3     1       1 FALSE     FALSE        FALSE FALSE        FALSE #> 8           4     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 9           4     1       1 FALSE     FALSE        FALSE  TRUE        FALSE #> 43          5     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 44          5     1       1 FALSE     FALSE        FALSE FALSE        FALSE #> 59          6     1       1 FALSE     FALSE        FALSE FALSE         TRUE #> 60          6     1       1 FALSE     FALSE        FALSE FALSE        FALSE #> 71          7     1       1 FALSE      TRUE        FALSE FALSE         TRUE #>    last_sample IsReference                  geometry #> 1        FALSE        TRUE POINT (14.12922 45.70766) #> 2        FALSE       FALSE POINT (14.10497 45.71356) #> 3         TRUE       FALSE POINT (14.07907 45.69898) #> 8        FALSE       FALSE POINT (14.12954 45.71845) #> 9         TRUE        TRUE POINT (14.11387 45.71246) #> 43       FALSE       FALSE  POINT (14.04242 45.7131) #> 44        TRUE        TRUE POINT (14.15949 45.71823) #> 59       FALSE        TRUE POINT (14.12501 45.70004) #> 60        TRUE       FALSE  POINT (13.80997 45.8081) #> 71       FALSE        TRUE  POINT (14.1563 45.69639) #>  #> $maternityLines #> Simple feature collection with 8 features and 7 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 14.04242 ymin: 45.67397 xmax: 14.1563 ymax: 45.71845 #> Geodetic CRS:  WGS 84 #>   ID pair fam plyClust  relation child parent                       geometry #> 1  1    1   1        1 maternity M10XC  M200F LINESTRING (14.14495 45.718... #> 2  2    2   1        1 maternity M1YP0  M200F LINESTRING (14.14495 45.718... #> 3  3    3   1        1 maternity M220J  M200F LINESTRING (14.14495 45.718... #> 4  4    4   1        1 maternity M22AM  M200F LINESTRING (14.14495 45.718... #> 5  5    5   1        1 maternity M2772  M200F LINESTRING (14.14495 45.718... #> 6  6    6   1        1 maternity M28LU  M200F LINESTRING (14.14495 45.718... #> 7  7    7   1        1 maternity M2AXE  M200F LINESTRING (14.14495 45.718... #> 8  8    8   1        1 maternity M2C1T  M200F LINESTRING (14.14495 45.718... #>  #> $paternityLines #> Simple feature collection with 8 features and 7 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 14.04242 ymin: 45.67033 xmax: 14.1563 ymax: 45.71845 #> Geodetic CRS:  WGS 84 #>   ID pair fam plyClust  relation child parent                       geometry #> 1  1    1   1        1 paternity M10XC  M228J LINESTRING (14.15404 45.670... #> 2  2    2   1        1 paternity M1YP0  M228J LINESTRING (14.15404 45.670... #> 3  3    3   1        1 paternity M220J  M228J LINESTRING (14.15404 45.670... #> 4  4    4   1        1 paternity M22AM  M228J LINESTRING (14.15404 45.670... #> 5  5    5   1        1 paternity M2772  M228J LINESTRING (14.15404 45.670... #> 6  6    6   1        1 paternity M28LU  M228J LINESTRING (14.15404 45.670... #> 7  7    7   1        1 paternity M2AXE  M228J LINESTRING (14.15404 45.670... #> 8  8    8   1        1 paternity M2C1T  M228J LINESTRING (14.15404 45.670... #>  #> $motherMoveLines #> Simple feature collection with 1 feature and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 14.03169 ymin: 45.68138 xmax: 14.14653 ymax: 45.7525 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                         <LINESTRING [°]> #> 1 M200F              11 (14.14653 45.7525, 14.03169 45.69501, 14.04434 45.71347… #>  #> $fatherMoveLines #> Simple feature collection with 1 feature and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 14.01201 ymin: 45.67033 xmax: 14.15404 ymax: 45.7114 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                         <LINESTRING [°]> #> 1 M228J               5 (14.01201 45.7114, 14.12798 45.70406, 14.1115 45.67397,… #>  #> $offspringMoveLines #> Simple feature collection with 8 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 13.80997 ymin: 45.52787 xmax: 14.39713 ymax: 46.28649 #> Geodetic CRS:  WGS 84 #> # A tibble: 8 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                         <LINESTRING [°]> #> 1 M10XC               3 (14.12922 45.70766, 14.10497 45.71356, 14.07907 45.6989… #> 2 M1YP0               2                   (14.12954 45.71845, 14.11387 45.71246) #> 3 M220J               2                    (14.04242 45.7131, 14.15949 45.71823) #> 4 M22AM               2                    (14.12501 45.70004, 13.80997 45.8081) #> 5 M2772               6 (14.1563 45.69639, 14.1013 46.2444, 14.0529 46.23509, 1… #> 6 M28LU               9 (14.11112 45.67397, 14.07135 45.73484, 14.39713 45.6606… #> 7 M2AXE               6 (14.14771 45.71293, 14.07355 45.7183, 14.06085 45.70965… #> 8 M2C1T               5 (14.1357 45.71323, 14.22777 45.57041, 14.22777 45.57041… #>  #> $motherMovePolygons #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 14.03169 ymin: 45.68138 xmax: 14.14653 ymax: 45.7525 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                            <POLYGON [°]> #> 1 M200F              11 ((14.03169 45.69501, 14.11843 45.68138, 14.14495 45.718… #>  #> $fatherMovePolygons #> Simple feature collection with 1 feature and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 14.01201 ymin: 45.67033 xmax: 14.15404 ymax: 45.7114 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                            <POLYGON [°]> #> 1 M228J               5 ((14.01201 45.7114, 14.1115 45.67397, 14.15404 45.67033… #>  #> $offspringMovePolygons #> Simple feature collection with 8 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 13.80997 ymin: 45.52787 xmax: 14.39713 ymax: 46.28649 #> Geodetic CRS:  WGS 84 #> # A tibble: 8 × 3 #>   AnimalRef no_mvPoints                                                 geometry #>   <chr>           <int>                                            <POLYGON [°]> #> 1 M10XC               3 ((14.07907 45.69898, 14.12922 45.70766, 14.10497 45.713… #> 2 M1YP0               2 ((14.11387 45.71246, 14.12954 45.71845, 14.12171 45.715… #> 3 M220J               2 ((14.10095 45.71568, 14.15949 45.71823, 14.04242 45.713… #> 4 M22AM               2 ((13.80997 45.8081, 14.12501 45.70004, 13.96764 45.7541… #> 5 M2772               6 ((13.97469 46.24017, 14.1563 45.69639, 14.1013 46.2444,… #> 6 M28LU               9 ((14.07135 45.73484, 14.11112 45.67397, 14.27129 45.598… #> 7 M2AXE               6 ((14.06085 45.70965, 14.02367 45.52787, 14.14771 45.712… #> 8 M2C1T               5 ((14.18179 45.64183, 14.22777 45.57041, 14.1357 45.7132… #>"},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares pedigree data for plotting and spatial representation — plot_table","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"Combines extended pedigree (obtained org_fams() function) sample metadata data visual (ped_satplot()) spatial (ped_spatial()) representation pedigree.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"","code":"plot_table(   plot_fams = \"all\",   all_fams,   ped,   sampledata,   datacolumns = c(\"Sample\", \"AnimalRef\", \"GeneticSex\", \"Date\", \"SType\", \"lat\", \"lng\",     \"FirstSeen\", \"LastSeen\", \"IsDead\"),   deadSample = c(\"Tissue\") )"},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"plot_fams Character string numeric vector. FamID numbers fams data generated org_fams() function. families want plotted defined character string \"\". subset families numeric vector FamIDs specified. Defaults \"\". all_fams Data frame. Family (fams) data generated org_fams() function. ped Data frame. Organized pedigree (ped) generated org_fams() function. sampledata Data frame. Metadata genetic samples belong individuals included pedigree reconstruction analysis. description sampledata structure sample information needed plot_table() see Details. datacolumns Vector column names included sampledata needed produce functions output (see Details). deadSample Single value vector different lethal sample types. Defaults c(\"Tissue\").","code":""},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"Extended sampledata data frame includes columns defined datacolumns parameter adds information needed visual spatial representation pedigree: plottingID: Numeric. Identifier number temporal pedigree plot ped_satplot(). case polygamous animals individual can included one family. FamID: Numeric. Identifier number family individual belongs . hsGroup: Numeric. Identifier number half-sib group individual. rep: Logical. individual reproductive current family, (current family defined FamID particular entry). later_rep: Logical. individual reproductive (later) families. isPolygamous: Logical. individual one mate. dead: Logical. individual dead. first_sample: Logical. particular sample first sample individual. last_sample: Logical. particular sample last sample individual. isReference: Logical. particular sample reference sample individual.","code":""},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"sampledata include columns contain information : unique identifier sample; character numeric (default column name = Sample, see check_sampledata() function), date sample collection Date format (default = Date), assignment sample particular individual; character numeric (default = AnimalRef, see check_sampledata() function), sex animal coded F, M NA; character (default = GeneticSex, see check_sampledata() function), longitude latitude coordinates sample collection location; numeric (default = lng lat, see check_sampledata() function), type particular sample eg. scat, tissue, saliva; character (default = SType, see check_sampledata() function), date first last sample individual Date format (default = FirstSeen LastSeen, see anim_timespan() function), value identifying individual dead; logical (default = IsDead, see anim_timespan() function).","code":""},{"path":"https://gr3602.github.io/wpeR/reference/plot_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares pedigree data for plotting and spatial representation — plot_table","text":"","code":"# Prepare the data for usage with plot_table() function. # Get animal timespan data using the anim_timespan() function. animal_ts <- anim_timespan(wolf_samples$AnimalRef,   wolf_samples$Date,   wolf_samples$SType,   dead = c(\"Tissue\") ) # Add animal timespan to the sampledata sampledata <- merge(wolf_samples, animal_ts, by.x = \"AnimalRef\", by.y = \"ID\", all.x = TRUE) # Define the path to the pedigree data file. path <- paste0(system.file(\"extdata\", package = \"wpeR\"), \"/wpeR_samplePed\") # Retrieve the pedigree data from the get_colony function. ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = \"FamAgg\") # Organize families and expand pedigree data using the org_fams function. org_tables <- org_fams(ped_colony, sampledata, output = \"both\")  # Run the function # Prepare data for plotting. plot_table(plot_fams = \"all\",   org_tables$fams,   org_tables$ped,   sampledata,   deadSample = c(\"Tissue\") ) #>       Sample AnimalRef GeneticSex       Date         SType      lat      lng #> 54     M20AP     M228J          M 2016-09-30        Saliva 45.71140 14.01201 #> 55     M228J     M228J          M 2017-01-26          Scat 45.70406 14.12798 #> 56     M28ML     M228J          M 2017-08-18        Saliva 45.67397 14.11150 #> 57     M28MM     M228J          M 2017-08-18        Saliva 45.67397 14.11150 #> 58     M2C36     M228J          M 2018-02-09        Tissue 45.67033 14.15404 #> 10   EX.1JH0     M200F          F 2015-07-27        Saliva 45.75250 14.14653 #> 11   EX.1JJ5     M200F          F 2015-08-14        Saliva 45.69501 14.03169 #> 12     M20A4     M200F          F 2016-10-11        Saliva 45.71347 14.04434 #> 13     M200F     M200F          F 2017-01-11          Scat 45.71602 14.08802 #> 14     M1TU6     M200F          F 2017-01-25          Scat 45.69746 14.12843 #> 15     M1XPY     M200F          F 2017-01-25          Scat 45.71062 14.08937 #> 16     M1YH8     M200F          F 2017-03-20          Scat 45.70856 14.07037 #> 17     M1T7L     M200F          F 2017-04-21          Scat 45.68138 14.11843 #> 18     M2ATF     M200F          F 2018-07-04          Scat 45.70502 14.07282 #> 19     M2ATC     M200F          F 2018-07-19          Scat 45.70253 14.09111 #> 20     M2AMA     M200F          F 2018-08-22          Scat 45.71833 14.14495 #> 1      M10XC     M10XC          M 2017-11-16          Scat 45.70766 14.12922 #> 2      M0PXH     M10XC          M 2017-11-22          Scat 45.71356 14.10497 #> 3      M0PFL     M10XC          M 2017-12-22          Scat 45.69898 14.07907 #> 8      M1XA7     M1YP0          F 2017-01-25          Scat 45.71845 14.12954 #> 9      M1YP0     M1YP0          F 2017-01-25        Tissue 45.71246 14.11387 #> 43     M2C2F     M220J          M 2017-11-10        Saliva 45.71310 14.04242 #> 44     M220J     M220J          M 2018-02-17          Scat 45.71823 14.15949 #> 59     M22AM     M22AM          M 2017-01-26          Scat 45.70004 14.12501 #> 60     M28MF     M22AM          M 2017-08-07        Saliva 45.80810 13.80997 #> 71     M2772     M2772          M 2017-11-12          Scat 45.69639 14.15630 #> 72     M2C71     M2772          M 2018-07-26        Saliva 46.24440 14.10130 #> 73    DAM00A     M2772          M 2019-05-17        Saliva 46.23509 14.05290 #> 74    DAM007     M2772          M 2019-05-31        Saliva 46.23282 14.05195 #> 75    MSV037     M2772          M 2019-10-18        Saliva 46.24017 13.97469 #> 76    MSV184     M2772          M 2020-09-29          Scat 46.28649 14.05114 #> 77     M28LU     M28LU          F 2017-09-18        Saliva 45.67397 14.11112 #> 78     M2C16     M28LU          F 2017-12-21        Saliva 45.73484 14.07135 #> 79     M2AL6     M28LU          F 2019-01-14          Scat 45.66065 14.39713 #> 80     M2CUT     M28LU          F 2019-01-20         Urine 45.59855 14.27129 #> 81     M2AH7     M28LU          F 2019-02-12         Urine 45.76028 14.31428 #> 82     M2AHA     M28LU          F 2019-02-17          Scat 45.69996 14.33099 #> 83    MSV134     M28LU          F 2020-12-04          Scat 45.73360 14.28250 #> 84    MSV1K5     M28LU          F 2021-01-12         Urine 45.66886 14.34709 #> 85    MSV1F2     M28LU          F 2021-01-19          Scat 45.70506 14.38520 #> 125    M275E     M2AXE          F 2017-12-16          Scat 45.71293 14.14771 #> 126    M2AXE     M2AXE          F 2018-03-23          Scat 45.71830 14.07355 #> 127    M2AXC     M2AXE          F 2018-03-26          Scat 45.70965 14.06085 #> 128    M2ATM     M2AXE          F 2018-08-20          Scat 45.70319 14.11762 #> 129    M1U0E     M2AXE          F 2018-11-04          Scat 45.71325 14.12380 #> 130   MSV078     M2AXE          F 2019-11-06          Scat 45.52787 14.02367 #> 131    M277F     M2C1T          F 2017-10-31          Scat 45.71323 14.13570 #> 132    M2C1T     M2C1T          F 2018-01-26        Saliva 45.57041 14.22777 #> 133    M2C1X     M2C1T          F 2018-01-26        Saliva 45.57041 14.22777 #> 134    M2C1U     M2C1T          F 2018-01-26        Saliva 45.57041 14.22777 #> 135    M2C1Y     M2C1T          F 2018-01-26        Saliva 45.57041 14.22777 #> 152   MSV00E    MSV00E          M 2019-08-12          Scat 45.62231 14.46746 #> 153   MSV13C    MSV00E          M 2020-12-04         Urine 45.73250 14.28590 #> 154   MSV136    MSV00E          M 2020-12-04          Scat 45.73470 14.28190 #> 155   MSV1K4    MSV00E          M 2021-01-12         Urine 45.66886 14.34709 #> 156   MSV1J2    MSV00E          M 2021-01-18         Urine 45.61193 14.34191 #> 157   MSV1HX    MSV00E          M 2021-01-18         Urine 45.60900 14.35484 #> 158   MSV1K1    MSV00E          M 2021-01-19         Urine 45.69613 14.39814 #> 159   MSV1J8    MSV00E          M 2021-01-31         Urine 45.70239 14.38266 #> 160   MSV1J7    MSV00E          M 2021-01-31         Urine 45.70327 14.37919 #> 161   MSV1F6    MSV00E          M 2021-01-31          Scat 45.69756 14.39805 #> 162   MSV1JC    MSV00E          M 2021-02-01         Urine 45.68693 14.35972 #> 163   MSV1JA    MSV00E          M 2021-02-01         Urine 45.69578 14.33394 #> 164   MSV1F7    MSV00E          M 2021-02-01          Scat 45.68693 14.35972 #> 165   MSV1AC    MSV00E          M 2021-03-05          Scat 45.63301 14.37316 #> 771    M28LU     M28LU          F 2017-09-18        Saliva 45.67397 14.11112 #> 781    M2C16     M28LU          F 2017-12-21        Saliva 45.73484 14.07135 #> 791    M2AL6     M28LU          F 2019-01-14          Scat 45.66065 14.39713 #> 801    M2CUT     M28LU          F 2019-01-20         Urine 45.59855 14.27129 #> 811    M2AH7     M28LU          F 2019-02-12         Urine 45.76028 14.31428 #> 821    M2AHA     M28LU          F 2019-02-17          Scat 45.69996 14.33099 #> 831   MSV134     M28LU          F 2020-12-04          Scat 45.73360 14.28250 #> 841   MSV1K5     M28LU          F 2021-01-12         Urine 45.66886 14.34709 #> 851   MSV1F2     M28LU          F 2021-01-19          Scat 45.70506 14.38520 #> 239   MSV10U    MSV10T          F 2020-08-16          Hair 45.65128 14.42428 #> 240   MSV10T    MSV10T          F 2020-08-16          Hair 45.65128 14.42428 #> 257   MSV1FF    MSV1C0          M 2021-02-16          Scat 45.63301 14.37316 #> 258   MSV1FK    MSV1C0          M 2021-02-17          Scat 45.65986 14.34720 #> 259   MSV1FU    MSV1C0          M 2021-02-26          Scat 45.65079 14.33447 #> 260   MSV1C0    MSV1C0          M 2021-03-07          Scat 45.68733 14.43675 #> 261   MSV1AP    MSV1C0          M 2021-03-30          Scat 45.62905 14.39491 #> 262   MSV1EX    MSV1EX          M 2021-01-18          Scat 45.65105 14.28651 #> 263   MSV1F5    MSV1F5          M 2021-01-23          Scat 45.65056 14.29599 #> 264   MSV1F8    MSV1F8          F 2021-02-04          Scat 45.66893 14.35993 #> 266   MSV1FJ    MSV1FJ          M 2021-02-16          Scat 45.65986 14.34720 #> 267   MSV1FH    MSV1FJ          M 2021-02-16          Scat 45.64201 14.37306 #> 268   MSV1AU    MSV1FJ          M 2021-03-07          Scat 45.70506 14.38520 #> 269   MSV1FL    MSV1FL          M 2021-02-17          Scat 45.65986 14.34720 #> 270   MSV1H3    MSV1FT          M 2021-01-18          Scat 45.64179 14.33458 #> 271   MSV1FT    MSV1FT          M 2021-02-26          Scat 45.65079 14.33447 #> 278   MSV1TM    MSV1TM          F 2020-11-15        Tissue 45.67862 14.24350 #> 711    M2772     M2772          M 2017-11-12          Scat 45.69639 14.15630 #> 721    M2C71     M2772          M 2018-07-26        Saliva 46.24440 14.10130 #> 731   DAM00A     M2772          M 2019-05-17        Saliva 46.23509 14.05290 #> 741   DAM007     M2772          M 2019-05-31        Saliva 46.23282 14.05195 #> 751   MSV037     M2772          M 2019-10-18        Saliva 46.24017 13.97469 #> 761   MSV184     M2772          M 2020-09-29          Scat 46.28649 14.05114 #> 86     M28TU     M28TU          F 2017-12-18          Hair 45.97594 13.81928 #> 87     M28TK     M28TU          F 2017-12-18          Hair 45.97594 13.81928 #> 88     M2ETC     M28TU          F 2019-04-30          Scat 46.29499 14.12504 #> 89     M2E30     M28TU          F 2019-10-18          Scat 46.24017 13.97469 #> 90    MSV183     M28TU          F 2020-09-29          Scat 46.27238 14.08331 #> 91    MSV17X     M28TU          F 2020-09-29          Scat 46.28649 14.05114 #> 92    MSV1L7     M28TU          F 2021-03-24          Scat 46.28086 14.10959 #> 93    MSV18L     M28TU          F 2021-03-25          Scat 46.27410 14.02601 #> 94    MSV1LT     M28TU          F 2021-04-23          Scat 46.26911 14.01011 #> 167   MSV013    MSV01X          M 2019-08-28          Scat 46.27046 14.17550 #> 168   MSV01X    MSV01X          M 2019-08-29          Scat 46.27046 14.17550 #> 173   MSV055    MSV055          F 2019-12-11          Scat 46.28286 14.16966 #> 174   MSV04C    MSV055          F 2020-01-10          Scat 46.27942 14.17742 #> 175   MSV0M2    MSV055          F 2020-03-24          Scat 46.29224 14.05496 #> 178   MSV0AL    MSV0AL          M 2019-12-11          Scat 46.28017 14.17802 #> 179   MSV0M4    MSV0AL          M 2020-03-11          Scat 46.26300 14.05469 #> 180   MSV17L    MSV0AL          M 2020-08-21          Scat 46.25680 14.05140 #> 181   MSV165    MSV0AL          M 2020-10-30          Scat 46.27054 14.06499 #> 182   MSV1L8    MSV0AL          M 2021-03-24          Scat 46.28086 14.10959 #> 183   MSV1LU    MSV0AL          M 2021-04-23          Scat 46.27641 14.07662 #> 184   MSV1M1    MSV0AL          M 2021-04-29          Scat 46.28024 14.08025 #> 222   MSV0TA    MSV0TA          M 2020-01-12        Tissue 46.27640 14.15241 #> 236   MSV16H    MSV0XT          M 2020-10-08          Scat 46.28700 14.05505 #> 237   MSV0XT    MSV0XT          M 2020-11-16         Blood 46.28701 14.05501 #> 238   MSV1M2    MSV0XT          M 2021-04-29          Scat 46.28318 14.04873 #> 252   MSV17U    MSV17U          M 2020-09-29          Scat 46.28701 14.05499 #> 253   MSV16K    MSV17U          M 2020-11-06          Scat 46.28639 14.05741 #> 254   MSV1M0    MSV17U          M 2021-04-29          Scat 46.27558 14.08261 #> 255   MSV180    MSV180          F 2020-09-29          Scat 46.28697 14.05487 #> 256   MSV18C    MSV18C          F 2020-11-06          Scat 46.28712 14.06162 #> 272   MSV167    MSV1KT          F 2020-10-06          Scat 46.26831 14.06872 #> 273   MSV1KT    MSV1KT          F 2021-02-16          Scat 46.25668 14.03503 #> 114    M1YFM     M2AM8          M 2017-04-07        Saliva 45.55265 14.18041 #> 115    M2AM8     M2AM8          M 2018-08-06          Scat 45.69745 14.15374 #> 116    M221T     M2AM8          M 2018-11-24          Scat 45.72506 14.16939 #> 117    M1J3K     M2AM8          M 2019-09-10          Scat 45.72102 14.05899 #> 118   MSV0C6     M2AM8          M 2019-12-09          Scat 45.70086 14.15954 #> 119    M1HC1     M2AM8          M 2020-06-27          Scat 45.74115 14.07214 #> 120    M1H2J     M2AM8          M 2020-07-15          Scat 45.70895 14.08488 #> 121    M220X     M2AM8          M 2020-11-08          Scat 45.71909 14.11472 #> 122   MSV1EU     M2AM8          M 2021-01-16          Scat 45.71237 14.13236 #> 123   MSV1FC     M2AM8          M 2021-02-10          Scat 45.70260 14.14820 #> 124   MSV1PT     M2AM8          M 2021-03-23          Scat 45.59378 14.19659 #> 101  EX.1JH0     M200F          F 2015-07-27        Saliva 45.75250 14.14653 #> 111  EX.1JJ5     M200F          F 2015-08-14        Saliva 45.69501 14.03169 #> 1210   M20A4     M200F          F 2016-10-11        Saliva 45.71347 14.04434 #> 136    M200F     M200F          F 2017-01-11          Scat 45.71602 14.08802 #> 141    M1TU6     M200F          F 2017-01-25          Scat 45.69746 14.12843 #> 151    M1XPY     M200F          F 2017-01-25          Scat 45.71062 14.08937 #> 166    M1YH8     M200F          F 2017-03-20          Scat 45.70856 14.07037 #> 171    M1T7L     M200F          F 2017-04-21          Scat 45.68138 14.11843 #> 185    M2ATF     M200F          F 2018-07-04          Scat 45.70502 14.07282 #> 191    M2ATC     M200F          F 2018-07-19          Scat 45.70253 14.09111 #> 201    M2AMA     M200F          F 2018-08-22          Scat 45.71833 14.14495 #> 4      M1J47     M1J47          M 2019-08-20          Scat 45.70854 14.09644 #> 5      M1HF2     M1J47          M 2019-08-31          Scat 45.69930 14.05550 #> 6     MSV163     M1J47          M 2020-07-17          Scat 45.71804 14.14319 #> 7     DAM0UP     M1J47          M 2021-01-07        Saliva 45.67048 14.09361 #> 45     M2APA     M221C          F 2018-10-29          Scat 45.71502 14.13748 #> 46     M221C     M221C          F 2019-01-13          Scat 45.70232 14.15219 #> 47     M1FMH     M221C          F 2019-08-29          Scat 45.71337 14.08121 #> 48     M1J3L     M221C          F 2019-08-29          Scat 45.70993 14.08987 #> 49     M1HKT     M221C          F 2019-08-31          Scat 45.69762 14.05900 #> 50     M1J3X     M221C          F 2019-08-31          Scat 45.70508 14.05810 #> 51    MSV06J     M221C          F 2019-12-29          Scat 45.51474 14.16969 #> 52    MSV0U4     M221C          F 2020-05-22 Direct Saliva 45.70103 14.14947 #> 53    MSV0U3     M221C          F 2020-05-22 Direct Saliva 45.70103 14.14947 #> 1361   M2C8Y     M2C8Y          F 2018-10-30        Tissue 45.71827 14.15001 #> 148    M2F1L     M2F1L          F 2019-04-07          Scat 45.69325 14.02606 #> 149   MSV0CF     M2F1L          F 2019-12-09          Scat 45.70021 14.15298 #> 150   MSV17J     M2F1L          F 2020-09-04          Scat 45.70079 14.12438 #> 1511  MSV1AH     M2F1L          F 2021-03-13          Scat 45.69915 14.16717 #> 169   MSV02F    MSV02F          M 2019-10-07        Tissue 45.71819 14.15811 #> 170   MSV036    MSV02L          M 2019-09-15          Hair 45.70530 14.12323 #> 1711  MSV035    MSV02L          M 2019-09-15          Hair 45.70530 14.12323 #> 172   MSV02L    MSV02L          M 2019-09-15        Tissue 45.70530 14.12323 #> 1851  MSV0CK    MSV0CK          F 2019-08-05          Scat 45.70777 14.14276 #> 186   MSV0C1    MSV0CK          F 2019-12-09          Scat 45.71562 14.13946 #> 187   MSV0FK    MSV0FK          M 2020-01-18          Scat 45.70669 14.17217 #> 188   MSV05T    MSV0FK          M 2020-02-21          Scat 45.71324 14.12459 #> 189   MSV12T    MSV0FK          M 2020-10-01          Scat 45.70127 14.17126 #> 190   MSV1A8    MSV0FK          M 2021-01-14          Scat 45.71204 14.10626 #> 1911  MSV171    MSV0FK          M 2021-02-02          Scat 45.74608 14.30873 #> 192   MSV1AJ    MSV0FK          M 2021-03-13          Scat 45.70163 14.17470 #> 193   MSV1LM    MSV0FK          M 2021-04-15          Scat 45.70198 14.17581 #> 194   MSV0H5    MSV0H5          F 2020-04-10          Scat 45.70619 14.10791 #> 195   MSV0P8    MSV0H5          F 2020-05-13          Scat 45.69969 14.15132 #> 196   MSV160    MSV0H5          F 2020-05-20          Scat 45.69930 14.15170 #> 197   MSV16P    MSV0H5          F 2021-02-02          Scat 45.72040 14.09153 #> 198   MSV1FX    MSV0H5          F 2021-02-10          Scat 45.74961 14.09186 #> 199   MSV1FA    MSV0H5          F 2021-02-10          Scat 45.74961 14.09186 #> 200   MSV1PM    MSV0H5          F 2021-03-17          Scat 45.70350 14.10595 #> 212   MSV0CC    MSV0P7          M 2019-11-23          Scat 45.69161 14.13391 #> 213   MSV0P7    MSV0P7          M 2020-05-12          Scat 45.70138 14.14934 #> 214    M1MY3    MSV0P7          M 2020-07-17          Scat 45.76065 14.08271 #> 226   MSV0X0    MSV0UP          F 2020-06-10 Direct Saliva 45.70125 14.14356 #> 227   MSV0UP    MSV0UP          F 2020-06-10 Direct Saliva 45.70125 14.14356 #> 228    M1HAL    MSV0UP          F 2021-03-17          Scat 45.68962 14.15528 #> 229   MSV0X1    MSV0UT          M 2020-06-10 Direct Saliva 45.70125 14.14356 #> 230   MSV0UT    MSV0UT          M 2020-06-10 Direct Saliva 45.70125 14.14356 #> 231   MSV0UX    MSV0UU          F 2020-06-10 Direct Saliva 45.70125 14.14356 #> 232   MSV0UU    MSV0UU          F 2020-06-10 Direct Saliva 45.70125 14.14356 #> 241   MSV16T    MSV16T          F 2021-02-02          Scat 45.71077 14.09304 #> 242   MSV16U    MSV16U          M 2021-02-02          Scat 45.70040 14.12448 #> 243   MSV170    MSV170          M 2021-02-02          Scat 45.70507 14.14729 #> 244   MSV16X    MSV170          M 2021-02-02          Scat 45.69623 14.16383 #> 245   MSV16M    MSV170          M 2021-02-02          Scat 45.72541 14.08766 #> 246    M1MXP    MSV170          M 2021-02-02          Scat 45.68903 14.14255 #> 247   MSV177    MSV177          F 2020-04-22          Scat 45.70591 14.14813 #> 248    M1FXY    MSV177          F 2020-07-11          Scat 45.71478 14.07232 #> 265   MSV1FE    MSV1FE          M 2021-02-10          Scat 45.70658 14.15090 #> 21     M20J6     M20AM          M 2016-08-29          Scat 45.65633 14.44540 #> 22     M20AM     M20AM          M 2016-11-04          Scat 45.65114 14.46200 #> 23     M1YY1     M20AM          M 2017-01-23         Urine 45.64967 14.45096 #> 24     M1YYF     M20AM          M 2017-01-24         Urine 45.64332 14.45711 #> 25     M1YYE     M20AM          M 2017-01-25         Urine 45.62691 14.46332 #> 26     M1YYL     M20AM          M 2017-01-26         Urine 45.64080 14.48813 #> 27     M1YTA     M20AM          M 2017-02-22          Scat 45.65207 14.48817 #> 28     M1YH5     M20AM          M 2017-02-26          Scat 45.65893 14.45372 #> 29     M1YH6     M20AM          M 2017-03-22          Scat 45.67760 14.46380 #> 30     M273L     M20AM          M 2018-03-01         Urine 45.66846 14.43309 #> 31     M273T     M20AM          M 2018-03-09          Scat 45.65827 14.50854 #> 32     M2AM0     M20AM          M 2018-12-16         Urine 45.66837 14.42410 #> 33     M2AM1     M20AM          M 2018-12-17         Urine 45.64872 14.45253 #> 34     M2AHE     M20AM          M 2018-12-18         Urine 45.65999 14.45315 #> 35     M2AHF     M20AM          M 2018-12-30         Urine 45.60398 14.50370 #> 36     M2AL5     M20AM          M 2019-01-22         Urine 45.66281 14.44468 #> 37    MSV001     M20AM          M 2019-08-22          Scat 45.64340 14.47239 #> 38    MSV01C     M20AM          M 2019-08-28          Scat 45.63685 14.47504 #> 39    MSV014     M20AM          M 2019-09-17          Scat 45.62758 14.48108 #> 40    MSV0UM     M20AM          M 2020-08-02 Direct Saliva 45.60573 14.49858 #> 41    MSV0XU     M20AM          M 2020-08-02         Blood 45.60573 14.49858 #> 42    MSV0UJ     M20AM          M 2020-08-02 Direct Saliva 45.60573 14.49858 #> 61     M2A25     M273P          F 2018-01-02         Urine 45.67225 14.49756 #> 62     M273P     M273P          F 2018-03-01         Urine 45.66127 14.43573 #> 63    MSV010     M273P          F 2019-08-07          Scat 45.61881 14.48008 #> 64    MSV01H     M273P          F 2019-08-23          Scat 45.62456 14.42654 #> 65    MSV06A     M273P          F 2020-02-29          Scat 45.65140 14.44994 #> 66    MSV115     M273P          F 2020-07-22        Saliva 45.66034 14.43702 #> 67    MSV10P     M273P          F 2020-07-22          Hair 45.66034 14.43702 #> 68    MSV10M     M273P          F 2020-07-22          Hair 45.66034 14.43702 #> 69     M2757     M2757          F 2018-01-05          Scat 45.65071 14.48715 #> 70     M2A7L     M2757          F 2018-02-09        Saliva 45.67844 14.44968 #> 95     M1P8K     M2ALK          F 2019-01-03          Scat 45.68619 14.86234 #> 96     M1P77     M2ALK          F 2019-01-03          Scat 45.68612 14.86233 #> 97     M2ALK     M2ALK          F 2019-01-04          Scat 45.70887 14.85561 #> 98     M2E1T     M2ALK          F 2019-02-21          Scat 45.68939 14.86435 #> 99     M2ETL     M2ALK          F 2019-04-16          Scat 45.68930 14.86435 #> 100   DAM00T     M2ALK          F 2019-07-23        Saliva 45.69520 14.79722 #> 1011  DAM00U     M2ALK          F 2019-07-23        Saliva 45.69520 14.79722 #> 102   MSV058     M2ALK          F 2019-10-10          Scat 45.67971 14.95029 #> 103   DAM03J     M2ALK          F 2019-10-26        Saliva 45.78295 14.86514 #> 104   DAM03K     M2ALK          F 2019-10-26        Saliva 45.78295 14.86514 #> 105   DAM03L     M2ALK          F 2019-10-26        Saliva 45.78295 14.86514 #> 106   MSV04J     M2ALK          F 2019-12-22          Scat 45.68872 15.00164 #> 107    M1U5J     M2ALK          F 2020-01-06          Scat 45.70892 14.89758 #> 108   MSV0F8     M2ALK          F 2020-02-05          Scat 45.70861 14.80598 #> 109   DAM084     M2ALK          F 2020-02-17        Saliva 45.81124 14.73190 #> 110   MSV0KX     M2ALK          F 2020-03-19          Scat 45.69771 14.96311 #> 1111   M1XPJ     M2ALK          F 2020-03-29          Scat 45.67071 14.95030 #> 112   MSV0LF     M2ALK          F 2020-04-14          Scat 45.68594 14.86170 #> 113    M0PUT     M2ALK          F 2020-07-08          Scat 45.71180 14.89602 #> 137    M2ETE     M2ETE          F 2019-03-20          Scat 45.67522 14.48804 #> 138   MSV00P     M2ETE          F 2019-08-03          Scat 45.64086 14.47475 #> 139   MSV00K     M2ETE          F 2019-08-03          Scat 45.63286 14.47609 #> 140   MSV00A     M2ETE          F 2019-08-04          Scat 45.61913 14.49839 #> 1411  MSV008     M2ETE          F 2019-08-06          Scat 45.61619 14.49116 #> 142    M2ELA     M2ETE          F 2019-08-13         Blood 45.62003 14.50304 #> 143    M2ELC     M2ETE          F 2019-08-13         Blood 45.62003 14.50304 #> 144    M2EUJ     M2EUJ          F 2019-04-23          Scat 45.65153 14.45563 #> 145   MSV00M     M2EUJ          F 2019-08-05          Scat 45.63044 14.47160 #> 146   MSV007     M2EUJ          F 2019-08-06          Scat 45.62000 14.47286 #> 147   MSV011     M2EUJ          F 2019-08-11          Scat 45.61873 14.41811 #> 1521  MSV00E    MSV00E          M 2019-08-12          Scat 45.62231 14.46746 #> 1531  MSV13C    MSV00E          M 2020-12-04         Urine 45.73250 14.28590 #> 1541  MSV136    MSV00E          M 2020-12-04          Scat 45.73470 14.28190 #> 1551  MSV1K4    MSV00E          M 2021-01-12         Urine 45.66886 14.34709 #> 1561  MSV1J2    MSV00E          M 2021-01-18         Urine 45.61193 14.34191 #> 1571  MSV1HX    MSV00E          M 2021-01-18         Urine 45.60900 14.35484 #> 1581  MSV1K1    MSV00E          M 2021-01-19         Urine 45.69613 14.39814 #> 1591  MSV1J8    MSV00E          M 2021-01-31         Urine 45.70239 14.38266 #> 1601  MSV1J7    MSV00E          M 2021-01-31         Urine 45.70327 14.37919 #> 1611  MSV1F6    MSV00E          M 2021-01-31          Scat 45.69756 14.39805 #> 1621  MSV1JC    MSV00E          M 2021-02-01         Urine 45.68693 14.35972 #> 1631  MSV1JA    MSV00E          M 2021-02-01         Urine 45.69578 14.33394 #> 1641  MSV1F7    MSV00E          M 2021-02-01          Scat 45.68693 14.35972 #> 1651  MSV1AC    MSV00E          M 2021-03-05          Scat 45.63301 14.37316 #> 1661  MSV018    MSV018          M 2019-09-12          Scat 45.62103 14.48773 #> 176   MSV0H7    MSV05L          M 2020-01-27          Scat 45.67981 14.44972 #> 177   MSV05L    MSV05L          M 2020-02-15          Scat 45.65158 14.48843 #> 2011  MSV0M6    MSV0M6          M 2020-02-24          Scat 45.62030 14.46180 #> 202   MSV162    MSV0M6          M 2020-06-19          Scat 45.62195 14.46820 #> 203   MSV161    MSV0M6          M 2020-06-19          Scat 45.62827 14.49130 #> 204    M1TJH    MSV0M6          M 2020-07-20          Scat 45.61514 14.49559 #> 205   MSV156    MSV0M6          M 2020-12-10         Urine 45.73389 14.52916 #> 206   MSV1J5    MSV0M6          M 2021-01-22         Urine 45.72918 14.52328 #> 207   MSV1MJ    MSV0M6          M 2021-04-07         Urine 45.93152 14.28435 #> 208   MSV1MK    MSV0M6          M 2021-04-07         Urine 45.90111 14.33289 #> 209   MSV1LK    MSV0M6          M 2021-04-08          Scat 45.90041 14.34455 #> 210   MSV1LJ    MSV0M6          M 2021-04-08          Scat 45.90041 14.32964 #> 211   MSV1L1    MSV0M6          M 2021-04-08         Urine 45.90230 14.33427 #> 215   MSV0T4    MSV0T4          M 2020-02-07        Tissue 45.64585 14.47385 #> 216    M220F    MSV0T4          M 2020-02-07          Scat 45.64253 14.47568 #> 217   MSV012    MSV0T7          M 2019-08-11          Scat 45.61864 14.41791 #> 218   MSV003    MSV0T7          M 2019-08-21          Scat 45.62228 14.46753 #> 219   MSV004    MSV0T7          M 2019-08-21          Scat 45.62393 14.45013 #> 220    M1136    MSV0T7          M 2020-01-22         Urine 45.85410 14.13536 #> 221   MSV0T7    MSV0T7          M 2020-02-09        Tissue 45.99250 14.03400 #> 223   MSV0TJ    MSV0TJ          F 2019-12-28        Tissue 45.65237 14.46354 #> 224   MSV0UK    MSV0UL          M 2020-07-15 Direct Saliva 45.62896 14.48918 #> 225   MSV0UL    MSV0UL          M 2020-07-15 Direct Saliva 45.62896 14.48918 #> 233   MSV022    MSV0X4          M 2019-09-03         Blood 45.61877 14.48030 #> 234   MSV016    MSV0X4          M 2019-09-04          Scat 45.61857 14.48020 #> 235   MSV0X4    MSV0X4          M 2019-10-23        Tissue 45.64327 14.48686 #> 249   MSV17F    MSV17F          F 2020-11-08          Scat 45.88518 14.29220 #> 250   MSV14T    MSV17F          F 2020-12-04         Urine 45.90737 14.27999 #> 251   MSV10X    MSV17F          F 2020-12-04          Hair 45.92104 14.28296 #> 274   MSV1CP    MSV1MH          F 2021-02-25          Scat 45.70273 14.68984 #> 275   MSV18K    MSV1MH          F 2021-03-18          Scat 45.66457 14.71755 #> 276   MSV1MH    MSV1MH          F 2021-04-14         Urine 45.57163 14.83508 #> 277   MSV1PJ    MSV1MH          F 2021-07-15          Scat 45.58962 14.83502 #> 1141   M1YFM     M2AM8          M 2017-04-07        Saliva 45.55265 14.18041 #> 1151   M2AM8     M2AM8          M 2018-08-06          Scat 45.69745 14.15374 #> 1161   M221T     M2AM8          M 2018-11-24          Scat 45.72506 14.16939 #> 1171   M1J3K     M2AM8          M 2019-09-10          Scat 45.72102 14.05899 #> 1181  MSV0C6     M2AM8          M 2019-12-09          Scat 45.70086 14.15954 #> 1191   M1HC1     M2AM8          M 2020-06-27          Scat 45.74115 14.07214 #> 1201   M1H2J     M2AM8          M 2020-07-15          Scat 45.70895 14.08488 #> 1211   M220X     M2AM8          M 2020-11-08          Scat 45.71909 14.11472 #> 1221  MSV1EU     M2AM8          M 2021-01-16          Scat 45.71237 14.13236 #> 1231  MSV1FC     M2AM8          M 2021-02-10          Scat 45.70260 14.14820 #> 1241  MSV1PT     M2AM8          M 2021-03-23          Scat 45.59378 14.19659 #> 611    M2A25     M273P          F 2018-01-02         Urine 45.67225 14.49756 #> 621    M273P     M273P          F 2018-03-01         Urine 45.66127 14.43573 #> 631   MSV010     M273P          F 2019-08-07          Scat 45.61881 14.48008 #> 641   MSV01H     M273P          F 2019-08-23          Scat 45.62456 14.42654 #> 651   MSV06A     M273P          F 2020-02-29          Scat 45.65140 14.44994 #> 661   MSV115     M273P          F 2020-07-22        Saliva 45.66034 14.43702 #> 671   MSV10P     M273P          F 2020-07-22          Hair 45.66034 14.43702 #> 681   MSV10M     M273P          F 2020-07-22          Hair 45.66034 14.43702 #> 2110   M20J6     M20AM          M 2016-08-29          Scat 45.65633 14.44540 #> 2210   M20AM     M20AM          M 2016-11-04          Scat 45.65114 14.46200 #> 2310   M1YY1     M20AM          M 2017-01-23         Urine 45.64967 14.45096 #> 2410   M1YYF     M20AM          M 2017-01-24         Urine 45.64332 14.45711 #> 2510   M1YYE     M20AM          M 2017-01-25         Urine 45.62691 14.46332 #> 2610   M1YYL     M20AM          M 2017-01-26         Urine 45.64080 14.48813 #> 279    M1YTA     M20AM          M 2017-02-22          Scat 45.65207 14.48817 #> 281    M1YH5     M20AM          M 2017-02-26          Scat 45.65893 14.45372 #> 291    M1YH6     M20AM          M 2017-03-22          Scat 45.67760 14.46380 #> 301    M273L     M20AM          M 2018-03-01         Urine 45.66846 14.43309 #> 311    M273T     M20AM          M 2018-03-09          Scat 45.65827 14.50854 #> 321    M2AM0     M20AM          M 2018-12-16         Urine 45.66837 14.42410 #> 331    M2AM1     M20AM          M 2018-12-17         Urine 45.64872 14.45253 #> 341    M2AHE     M20AM          M 2018-12-18         Urine 45.65999 14.45315 #> 351    M2AHF     M20AM          M 2018-12-30         Urine 45.60398 14.50370 #> 361    M2AL5     M20AM          M 2019-01-22         Urine 45.66281 14.44468 #> 371   MSV001     M20AM          M 2019-08-22          Scat 45.64340 14.47239 #> 381   MSV01C     M20AM          M 2019-08-28          Scat 45.63685 14.47504 #> 391   MSV014     M20AM          M 2019-09-17          Scat 45.62758 14.48108 #> 401   MSV0UM     M20AM          M 2020-08-02 Direct Saliva 45.60573 14.49858 #> 411   MSV0XU     M20AM          M 2020-08-02         Blood 45.60573 14.49858 #> 421   MSV0UJ     M20AM          M 2020-08-02 Direct Saliva 45.60573 14.49858 #> 861    M28TU     M28TU          F 2017-12-18          Hair 45.97594 13.81928 #> 871    M28TK     M28TU          F 2017-12-18          Hair 45.97594 13.81928 #> 881    M2ETC     M28TU          F 2019-04-30          Scat 46.29499 14.12504 #> 891    M2E30     M28TU          F 2019-10-18          Scat 46.24017 13.97469 #> 901   MSV183     M28TU          F 2020-09-29          Scat 46.27238 14.08331 #> 911   MSV17X     M28TU          F 2020-09-29          Scat 46.28649 14.05114 #> 921   MSV1L7     M28TU          F 2021-03-24          Scat 46.28086 14.10959 #> 931   MSV18L     M28TU          F 2021-03-25          Scat 46.27410 14.02601 #> 941   MSV1LT     M28TU          F 2021-04-23          Scat 46.26911 14.01011 #> 541    M20AP     M228J          M 2016-09-30        Saliva 45.71140 14.01201 #> 551    M228J     M228J          M 2017-01-26          Scat 45.70406 14.12798 #> 561    M28ML     M228J          M 2017-08-18        Saliva 45.67397 14.11150 #> 571    M28MM     M228J          M 2017-08-18        Saliva 45.67397 14.11150 #> 581    M2C36     M228J          M 2018-02-09        Tissue 45.67033 14.15404 #> 1010 EX.1JH0     M200F          F 2015-07-27        Saliva 45.75250 14.14653 #> 1110 EX.1JJ5     M200F          F 2015-08-14        Saliva 45.69501 14.03169 #> 1212   M20A4     M200F          F 2016-10-11        Saliva 45.71347 14.04434 #> 1310   M200F     M200F          F 2017-01-11          Scat 45.71602 14.08802 #> 1410   M1TU6     M200F          F 2017-01-25          Scat 45.69746 14.12843 #> 1510   M1XPY     M200F          F 2017-01-25          Scat 45.71062 14.08937 #> 1610   M1YH8     M200F          F 2017-03-20          Scat 45.70856 14.07037 #> 1710   M1T7L     M200F          F 2017-04-21          Scat 45.68138 14.11843 #> 1810   M2ATF     M200F          F 2018-07-04          Scat 45.70502 14.07282 #> 1910   M2ATC     M200F          F 2018-07-19          Scat 45.70253 14.09111 #> 2010   M2AMA     M200F          F 2018-08-22          Scat 45.71833 14.14495 #>       FirstSeen   LastSeen IsDead plottingID FamID hsGroup   rep later_rep #> 54   2016-09-30 2018-02-09   TRUE          1     1       1  TRUE     FALSE #> 55   2016-09-30 2018-02-09   TRUE          1     1       1  TRUE     FALSE #> 56   2016-09-30 2018-02-09   TRUE          1     1       1  TRUE     FALSE #> 57   2016-09-30 2018-02-09   TRUE          1     1       1  TRUE     FALSE #> 58   2016-09-30 2018-02-09   TRUE          1     1       1  TRUE     FALSE #> 10   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 11   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 12   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 13   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 14   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 15   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 16   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 17   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 18   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 19   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 20   2015-07-27 2018-08-22  FALSE          2     1       1  TRUE     FALSE #> 1    2017-11-16 2017-12-22  FALSE          3     1       1 FALSE     FALSE #> 2    2017-11-16 2017-12-22  FALSE          3     1       1 FALSE     FALSE #> 3    2017-11-16 2017-12-22  FALSE          3     1       1 FALSE     FALSE #> 8    2017-01-25 2017-01-25   TRUE          4     1       1 FALSE     FALSE #> 9    2017-01-25 2017-01-25   TRUE          4     1       1 FALSE     FALSE #> 43   2017-11-10 2018-02-17  FALSE          5     1       1 FALSE     FALSE #> 44   2017-11-10 2018-02-17  FALSE          5     1       1 FALSE     FALSE #> 59   2017-01-26 2017-08-07  FALSE          6     1       1 FALSE     FALSE #> 60   2017-01-26 2017-08-07  FALSE          6     1       1 FALSE     FALSE #> 71   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 72   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 73   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 74   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 75   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 76   2017-11-12 2020-09-29  FALSE          7     1       1 FALSE      TRUE #> 77   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 78   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 79   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 80   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 81   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 82   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 83   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 84   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 85   2017-09-18 2021-01-19  FALSE          8     1       1 FALSE      TRUE #> 125  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 126  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 127  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 128  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 129  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 130  2017-12-16 2019-11-06  FALSE          9     1       1 FALSE     FALSE #> 131  2017-10-31 2018-01-26  FALSE         10     1       1 FALSE     FALSE #> 132  2017-10-31 2018-01-26  FALSE         10     1       1 FALSE     FALSE #> 133  2017-10-31 2018-01-26  FALSE         10     1       1 FALSE     FALSE #> 134  2017-10-31 2018-01-26  FALSE         10     1       1 FALSE     FALSE #> 135  2017-10-31 2018-01-26  FALSE         10     1       1 FALSE     FALSE #> 152  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 153  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 154  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 155  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 156  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 157  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 158  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 159  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 160  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 161  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 162  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 163  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 164  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 165  2019-08-12 2021-03-05  FALSE         11     2       2  TRUE     FALSE #> 771  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 781  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 791  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 801  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 811  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 821  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 831  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 841  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 851  2017-09-18 2021-01-19  FALSE         12     2       2  TRUE     FALSE #> 239  2020-08-16 2020-08-16  FALSE         13     2       2 FALSE     FALSE #> 240  2020-08-16 2020-08-16  FALSE         13     2       2 FALSE     FALSE #> 257  2021-02-16 2021-03-30  FALSE         14     2       2 FALSE     FALSE #> 258  2021-02-16 2021-03-30  FALSE         14     2       2 FALSE     FALSE #> 259  2021-02-16 2021-03-30  FALSE         14     2       2 FALSE     FALSE #> 260  2021-02-16 2021-03-30  FALSE         14     2       2 FALSE     FALSE #> 261  2021-02-16 2021-03-30  FALSE         14     2       2 FALSE     FALSE #> 262  2021-01-18 2021-01-18  FALSE         15     2       2 FALSE     FALSE #> 263  2021-01-23 2021-01-23  FALSE         16     2       2 FALSE     FALSE #> 264  2021-02-04 2021-02-04  FALSE         17     2       2 FALSE     FALSE #> 266  2021-02-16 2021-03-07  FALSE         18     2       2 FALSE     FALSE #> 267  2021-02-16 2021-03-07  FALSE         18     2       2 FALSE     FALSE #> 268  2021-02-16 2021-03-07  FALSE         18     2       2 FALSE     FALSE #> 269  2021-02-17 2021-02-17  FALSE         19     2       2 FALSE     FALSE #> 270  2021-01-18 2021-02-26  FALSE         20     2       2 FALSE     FALSE #> 271  2021-01-18 2021-02-26  FALSE         20     2       2 FALSE     FALSE #> 278  2020-11-15 2020-11-15   TRUE         21     2       2 FALSE     FALSE #> 711  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 721  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 731  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 741  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 751  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 761  2017-11-12 2020-09-29  FALSE         22     3       3  TRUE     FALSE #> 86   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 87   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 88   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 89   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 90   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 91   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 92   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 93   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 94   2017-12-18 2021-04-23  FALSE         23     3       3  TRUE     FALSE #> 167  2019-08-28 2019-08-29  FALSE         24     3       3 FALSE     FALSE #> 168  2019-08-28 2019-08-29  FALSE         24     3       3 FALSE     FALSE #> 173  2019-12-11 2020-03-24  FALSE         25     3       3 FALSE     FALSE #> 174  2019-12-11 2020-03-24  FALSE         25     3       3 FALSE     FALSE #> 175  2019-12-11 2020-03-24  FALSE         25     3       3 FALSE     FALSE #> 178  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 179  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 180  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 181  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 182  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 183  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 184  2019-12-11 2021-04-29  FALSE         26     3       3 FALSE     FALSE #> 222  2020-01-12 2020-01-12   TRUE         27     3       3 FALSE     FALSE #> 236  2020-10-08 2021-04-29  FALSE         28     3       3 FALSE     FALSE #> 237  2020-10-08 2021-04-29  FALSE         28     3       3 FALSE     FALSE #> 238  2020-10-08 2021-04-29  FALSE         28     3       3 FALSE     FALSE #> 252  2020-09-29 2021-04-29  FALSE         29     3       3 FALSE     FALSE #> 253  2020-09-29 2021-04-29  FALSE         29     3       3 FALSE     FALSE #> 254  2020-09-29 2021-04-29  FALSE         29     3       3 FALSE     FALSE #> 255  2020-09-29 2020-09-29  FALSE         30     3       3 FALSE     FALSE #> 256  2020-11-06 2020-11-06  FALSE         31     3       3 FALSE     FALSE #> 272  2020-10-06 2021-02-16  FALSE         32     3       3 FALSE     FALSE #> 273  2020-10-06 2021-02-16  FALSE         32     3       3 FALSE     FALSE #> 114  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 115  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 116  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 117  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 118  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 119  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 120  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 121  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 122  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 123  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 124  2017-04-07 2021-03-23  FALSE         33     4       1  TRUE     FALSE #> 101  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 111  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 1210 2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 136  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 141  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 151  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 166  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 171  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 185  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 191  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 201  2015-07-27 2018-08-22  FALSE         34     4       1  TRUE     FALSE #> 4    2019-08-20 2021-01-07  FALSE         35     4       1 FALSE     FALSE #> 5    2019-08-20 2021-01-07  FALSE         35     4       1 FALSE     FALSE #> 6    2019-08-20 2021-01-07  FALSE         35     4       1 FALSE     FALSE #> 7    2019-08-20 2021-01-07  FALSE         35     4       1 FALSE     FALSE #> 45   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 46   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 47   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 48   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 49   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 50   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 51   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 52   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 53   2018-10-29 2020-05-22  FALSE         36     4       1 FALSE     FALSE #> 1361 2018-10-30 2018-10-30   TRUE         37     4       1 FALSE     FALSE #> 148  2019-04-07 2021-03-13  FALSE         38     4       1 FALSE     FALSE #> 149  2019-04-07 2021-03-13  FALSE         38     4       1 FALSE     FALSE #> 150  2019-04-07 2021-03-13  FALSE         38     4       1 FALSE     FALSE #> 1511 2019-04-07 2021-03-13  FALSE         38     4       1 FALSE     FALSE #> 169  2019-10-07 2019-10-07   TRUE         39     4       1 FALSE     FALSE #> 170  2019-09-15 2019-09-15   TRUE         40     4       1 FALSE     FALSE #> 1711 2019-09-15 2019-09-15   TRUE         40     4       1 FALSE     FALSE #> 172  2019-09-15 2019-09-15   TRUE         40     4       1 FALSE     FALSE #> 1851 2019-08-05 2019-12-09  FALSE         41     4       1 FALSE     FALSE #> 186  2019-08-05 2019-12-09  FALSE         41     4       1 FALSE     FALSE #> 187  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 188  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 189  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 190  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 1911 2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 192  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 193  2020-01-18 2021-04-15  FALSE         42     4       1 FALSE     FALSE #> 194  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 195  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 196  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 197  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 198  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 199  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 200  2020-04-10 2021-03-17  FALSE         43     4       1 FALSE     FALSE #> 212  2019-11-23 2020-07-17  FALSE         44     4       1 FALSE     FALSE #> 213  2019-11-23 2020-07-17  FALSE         44     4       1 FALSE     FALSE #> 214  2019-11-23 2020-07-17  FALSE         44     4       1 FALSE     FALSE #> 226  2020-06-10 2021-03-17  FALSE         45     4       1 FALSE     FALSE #> 227  2020-06-10 2021-03-17  FALSE         45     4       1 FALSE     FALSE #> 228  2020-06-10 2021-03-17  FALSE         45     4       1 FALSE     FALSE #> 229  2020-06-10 2020-06-10  FALSE         46     4       1 FALSE     FALSE #> 230  2020-06-10 2020-06-10  FALSE         46     4       1 FALSE     FALSE #> 231  2020-06-10 2020-06-10  FALSE         47     4       1 FALSE     FALSE #> 232  2020-06-10 2020-06-10  FALSE         47     4       1 FALSE     FALSE #> 241  2021-02-02 2021-02-02  FALSE         48     4       1 FALSE     FALSE #> 242  2021-02-02 2021-02-02  FALSE         49     4       1 FALSE     FALSE #> 243  2021-02-02 2021-02-02  FALSE         50     4       1 FALSE     FALSE #> 244  2021-02-02 2021-02-02  FALSE         50     4       1 FALSE     FALSE #> 245  2021-02-02 2021-02-02  FALSE         50     4       1 FALSE     FALSE #> 246  2021-02-02 2021-02-02  FALSE         50     4       1 FALSE     FALSE #> 247  2020-04-22 2020-07-11  FALSE         51     4       1 FALSE     FALSE #> 248  2020-04-22 2020-07-11  FALSE         51     4       1 FALSE     FALSE #> 265  2021-02-10 2021-02-10  FALSE         52     4       1 FALSE     FALSE #> 21   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 22   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 23   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 24   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 25   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 26   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 27   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 28   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 29   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 30   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 31   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 32   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 33   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 34   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 35   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 36   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 37   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 38   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 39   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 40   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 41   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 42   2016-08-29 2020-08-02  FALSE         53     5       4  TRUE     FALSE #> 61   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 62   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 63   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 64   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 65   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 66   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 67   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 68   2018-01-02 2020-07-22  FALSE         54     5       4  TRUE     FALSE #> 69   2018-01-05 2018-02-09  FALSE         55     5       4 FALSE     FALSE #> 70   2018-01-05 2018-02-09  FALSE         55     5       4 FALSE     FALSE #> 95   2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 96   2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 97   2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 98   2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 99   2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 100  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 1011 2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 102  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 103  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 104  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 105  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 106  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 107  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 108  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 109  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 110  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 1111 2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 112  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 113  2019-01-03 2020-07-08  FALSE         56     5       4 FALSE     FALSE #> 137  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 138  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 139  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 140  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 1411 2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 142  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 143  2019-03-20 2019-08-13  FALSE         57     5       4 FALSE     FALSE #> 144  2019-04-23 2019-08-11  FALSE         58     5       4 FALSE     FALSE #> 145  2019-04-23 2019-08-11  FALSE         58     5       4 FALSE     FALSE #> 146  2019-04-23 2019-08-11  FALSE         58     5       4 FALSE     FALSE #> 147  2019-04-23 2019-08-11  FALSE         58     5       4 FALSE     FALSE #> 1521 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1531 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1541 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1551 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1561 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1571 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1581 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1591 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1601 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1611 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1621 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1631 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1641 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1651 2019-08-12 2021-03-05  FALSE         59     5       4 FALSE      TRUE #> 1661 2019-09-12 2019-09-12  FALSE         60     5       4 FALSE     FALSE #> 176  2020-01-27 2020-02-15  FALSE         61     5       4 FALSE     FALSE #> 177  2020-01-27 2020-02-15  FALSE         61     5       4 FALSE     FALSE #> 2011 2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 202  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 203  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 204  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 205  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 206  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 207  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 208  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 209  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 210  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 211  2020-02-24 2021-04-08  FALSE         62     5       4 FALSE     FALSE #> 215  2020-02-07 2020-02-07   TRUE         63     5       4 FALSE     FALSE #> 216  2020-02-07 2020-02-07   TRUE         63     5       4 FALSE     FALSE #> 217  2019-08-11 2020-02-09   TRUE         64     5       4 FALSE     FALSE #> 218  2019-08-11 2020-02-09   TRUE         64     5       4 FALSE     FALSE #> 219  2019-08-11 2020-02-09   TRUE         64     5       4 FALSE     FALSE #> 220  2019-08-11 2020-02-09   TRUE         64     5       4 FALSE     FALSE #> 221  2019-08-11 2020-02-09   TRUE         64     5       4 FALSE     FALSE #> 223  2019-12-28 2019-12-28   TRUE         65     5       4 FALSE     FALSE #> 224  2020-07-15 2020-07-15  FALSE         66     5       4 FALSE     FALSE #> 225  2020-07-15 2020-07-15  FALSE         66     5       4 FALSE     FALSE #> 233  2019-09-03 2019-10-23   TRUE         67     5       4 FALSE     FALSE #> 234  2019-09-03 2019-10-23   TRUE         67     5       4 FALSE     FALSE #> 235  2019-09-03 2019-10-23   TRUE         67     5       4 FALSE     FALSE #> 249  2020-11-08 2020-12-04  FALSE         68     5       4 FALSE     FALSE #> 250  2020-11-08 2020-12-04  FALSE         68     5       4 FALSE     FALSE #> 251  2020-11-08 2020-12-04  FALSE         68     5       4 FALSE     FALSE #> 274  2021-02-25 2021-07-15  FALSE         69     5       4 FALSE     FALSE #> 275  2021-02-25 2021-07-15  FALSE         69     5       4 FALSE     FALSE #> 276  2021-02-25 2021-07-15  FALSE         69     5       4 FALSE     FALSE #> 277  2021-02-25 2021-07-15  FALSE         69     5       4 FALSE     FALSE #> 1141 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1151 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1161 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1171 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1181 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1191 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1201 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1211 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1221 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1231 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 1241 2017-04-07 2021-03-23  FALSE         71     0       0 FALSE      TRUE #> 611  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 621  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 631  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 641  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 651  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 661  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 671  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 681  2018-01-02 2020-07-22  FALSE         72     0       0 FALSE      TRUE #> 2110 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 2210 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 2310 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 2410 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 2510 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 2610 2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 279  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 281  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 291  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 301  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 311  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 321  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 331  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 341  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 351  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 361  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 371  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 381  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 391  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 401  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 411  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 421  2016-08-29 2020-08-02  FALSE         73     0       0 FALSE      TRUE #> 861  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 871  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 881  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 891  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 901  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 911  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 921  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 931  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 941  2017-12-18 2021-04-23  FALSE         74     0       0 FALSE      TRUE #> 541  2016-09-30 2018-02-09   TRUE         75     0       0 FALSE      TRUE #> 551  2016-09-30 2018-02-09   TRUE         75     0       0 FALSE      TRUE #> 561  2016-09-30 2018-02-09   TRUE         75     0       0 FALSE      TRUE #> 571  2016-09-30 2018-02-09   TRUE         75     0       0 FALSE      TRUE #> 581  2016-09-30 2018-02-09   TRUE         75     0       0 FALSE      TRUE #> 1010 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1110 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1212 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1310 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1410 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1510 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1610 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1710 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1810 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 1910 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #> 2010 2015-07-27 2018-08-22  FALSE         76     0       0 FALSE      TRUE #>      isPolygamous  dead first_sample last_sample IsReference #> 54          FALSE FALSE         TRUE       FALSE       FALSE #> 55          FALSE FALSE        FALSE       FALSE        TRUE #> 56          FALSE FALSE        FALSE       FALSE       FALSE #> 57          FALSE FALSE        FALSE       FALSE       FALSE #> 58          FALSE  TRUE        FALSE        TRUE       FALSE #> 10           TRUE FALSE         TRUE       FALSE       FALSE #> 11           TRUE FALSE        FALSE       FALSE       FALSE #> 12           TRUE FALSE        FALSE       FALSE       FALSE #> 13           TRUE FALSE        FALSE       FALSE        TRUE #> 14           TRUE FALSE        FALSE       FALSE       FALSE #> 15           TRUE FALSE        FALSE       FALSE       FALSE #> 16           TRUE FALSE        FALSE       FALSE       FALSE #> 17           TRUE FALSE        FALSE       FALSE       FALSE #> 18           TRUE FALSE        FALSE       FALSE       FALSE #> 19           TRUE FALSE        FALSE       FALSE       FALSE #> 20           TRUE FALSE        FALSE        TRUE       FALSE #> 1           FALSE FALSE         TRUE       FALSE        TRUE #> 2           FALSE FALSE        FALSE       FALSE       FALSE #> 3           FALSE FALSE        FALSE        TRUE       FALSE #> 8           FALSE FALSE         TRUE        TRUE       FALSE #> 9           FALSE  TRUE        FALSE       FALSE        TRUE #> 43          FALSE FALSE         TRUE       FALSE       FALSE #> 44          FALSE FALSE        FALSE        TRUE        TRUE #> 59          FALSE FALSE         TRUE       FALSE        TRUE #> 60          FALSE FALSE        FALSE        TRUE       FALSE #> 71          FALSE FALSE         TRUE       FALSE        TRUE #> 72          FALSE FALSE        FALSE       FALSE       FALSE #> 73          FALSE FALSE        FALSE       FALSE       FALSE #> 74          FALSE FALSE        FALSE       FALSE       FALSE #> 75          FALSE FALSE        FALSE       FALSE       FALSE #> 76          FALSE FALSE        FALSE        TRUE       FALSE #> 77          FALSE FALSE         TRUE       FALSE        TRUE #> 78          FALSE FALSE        FALSE       FALSE       FALSE #> 79          FALSE FALSE        FALSE       FALSE       FALSE #> 80          FALSE FALSE        FALSE       FALSE       FALSE #> 81          FALSE FALSE        FALSE       FALSE       FALSE #> 82          FALSE FALSE        FALSE       FALSE       FALSE #> 83          FALSE FALSE        FALSE       FALSE       FALSE #> 84          FALSE FALSE        FALSE       FALSE       FALSE #> 85          FALSE FALSE        FALSE        TRUE       FALSE #> 125         FALSE FALSE         TRUE       FALSE       FALSE #> 126         FALSE FALSE        FALSE       FALSE        TRUE #> 127         FALSE FALSE        FALSE       FALSE       FALSE #> 128         FALSE FALSE        FALSE       FALSE       FALSE #> 129         FALSE FALSE        FALSE       FALSE       FALSE #> 130         FALSE FALSE        FALSE        TRUE       FALSE #> 131         FALSE FALSE         TRUE       FALSE       FALSE #> 132         FALSE FALSE        FALSE        TRUE        TRUE #> 133         FALSE FALSE        FALSE       FALSE       FALSE #> 134         FALSE FALSE        FALSE       FALSE       FALSE #> 135         FALSE FALSE        FALSE       FALSE       FALSE #> 152         FALSE FALSE         TRUE       FALSE        TRUE #> 153         FALSE FALSE        FALSE       FALSE       FALSE #> 154         FALSE FALSE        FALSE       FALSE       FALSE #> 155         FALSE FALSE        FALSE       FALSE       FALSE #> 156         FALSE FALSE        FALSE       FALSE       FALSE #> 157         FALSE FALSE        FALSE       FALSE       FALSE #> 158         FALSE FALSE        FALSE       FALSE       FALSE #> 159         FALSE FALSE        FALSE       FALSE       FALSE #> 160         FALSE FALSE        FALSE       FALSE       FALSE #> 161         FALSE FALSE        FALSE       FALSE       FALSE #> 162         FALSE FALSE        FALSE       FALSE       FALSE #> 163         FALSE FALSE        FALSE       FALSE       FALSE #> 164         FALSE FALSE        FALSE       FALSE       FALSE #> 165         FALSE FALSE        FALSE        TRUE       FALSE #> 771         FALSE FALSE         TRUE       FALSE        TRUE #> 781         FALSE FALSE        FALSE       FALSE       FALSE #> 791         FALSE FALSE        FALSE       FALSE       FALSE #> 801         FALSE FALSE        FALSE       FALSE       FALSE #> 811         FALSE FALSE        FALSE       FALSE       FALSE #> 821         FALSE FALSE        FALSE       FALSE       FALSE #> 831         FALSE FALSE        FALSE       FALSE       FALSE #> 841         FALSE FALSE        FALSE       FALSE       FALSE #> 851         FALSE FALSE        FALSE        TRUE       FALSE #> 239         FALSE FALSE         TRUE        TRUE       FALSE #> 240         FALSE FALSE        FALSE       FALSE        TRUE #> 257         FALSE FALSE         TRUE       FALSE       FALSE #> 258         FALSE FALSE        FALSE       FALSE       FALSE #> 259         FALSE FALSE        FALSE       FALSE       FALSE #> 260         FALSE FALSE        FALSE       FALSE        TRUE #> 261         FALSE FALSE        FALSE        TRUE       FALSE #> 262         FALSE FALSE         TRUE        TRUE        TRUE #> 263         FALSE FALSE         TRUE        TRUE        TRUE #> 264         FALSE FALSE         TRUE        TRUE        TRUE #> 266         FALSE FALSE         TRUE       FALSE        TRUE #> 267         FALSE FALSE        FALSE       FALSE       FALSE #> 268         FALSE FALSE        FALSE        TRUE       FALSE #> 269         FALSE FALSE         TRUE        TRUE        TRUE #> 270         FALSE FALSE         TRUE       FALSE       FALSE #> 271         FALSE FALSE        FALSE        TRUE        TRUE #> 278         FALSE  TRUE         TRUE        TRUE        TRUE #> 711         FALSE FALSE         TRUE       FALSE        TRUE #> 721         FALSE FALSE        FALSE       FALSE       FALSE #> 731         FALSE FALSE        FALSE       FALSE       FALSE #> 741         FALSE FALSE        FALSE       FALSE       FALSE #> 751         FALSE FALSE        FALSE       FALSE       FALSE #> 761         FALSE FALSE        FALSE        TRUE       FALSE #> 86          FALSE FALSE         TRUE       FALSE        TRUE #> 87          FALSE FALSE        FALSE       FALSE       FALSE #> 88          FALSE FALSE        FALSE       FALSE       FALSE #> 89          FALSE FALSE        FALSE       FALSE       FALSE #> 90          FALSE FALSE        FALSE       FALSE       FALSE #> 91          FALSE FALSE        FALSE       FALSE       FALSE #> 92          FALSE FALSE        FALSE       FALSE       FALSE #> 93          FALSE FALSE        FALSE       FALSE       FALSE #> 94          FALSE FALSE        FALSE        TRUE       FALSE #> 167         FALSE FALSE         TRUE       FALSE       FALSE #> 168         FALSE FALSE        FALSE        TRUE        TRUE #> 173         FALSE FALSE         TRUE       FALSE        TRUE #> 174         FALSE FALSE        FALSE       FALSE       FALSE #> 175         FALSE FALSE        FALSE        TRUE       FALSE #> 178         FALSE FALSE         TRUE       FALSE        TRUE #> 179         FALSE FALSE        FALSE       FALSE       FALSE #> 180         FALSE FALSE        FALSE       FALSE       FALSE #> 181         FALSE FALSE        FALSE       FALSE       FALSE #> 182         FALSE FALSE        FALSE       FALSE       FALSE #> 183         FALSE FALSE        FALSE       FALSE       FALSE #> 184         FALSE FALSE        FALSE        TRUE       FALSE #> 222         FALSE  TRUE         TRUE        TRUE        TRUE #> 236         FALSE FALSE         TRUE       FALSE       FALSE #> 237         FALSE FALSE        FALSE       FALSE        TRUE #> 238         FALSE FALSE        FALSE        TRUE       FALSE #> 252         FALSE FALSE         TRUE       FALSE        TRUE #> 253         FALSE FALSE        FALSE       FALSE       FALSE #> 254         FALSE FALSE        FALSE        TRUE       FALSE #> 255         FALSE FALSE         TRUE        TRUE        TRUE #> 256         FALSE FALSE         TRUE        TRUE        TRUE #> 272         FALSE FALSE         TRUE       FALSE       FALSE #> 273         FALSE FALSE        FALSE        TRUE        TRUE #> 114         FALSE FALSE         TRUE       FALSE       FALSE #> 115         FALSE FALSE        FALSE       FALSE        TRUE #> 116         FALSE FALSE        FALSE       FALSE       FALSE #> 117         FALSE FALSE        FALSE       FALSE       FALSE #> 118         FALSE FALSE        FALSE       FALSE       FALSE #> 119         FALSE FALSE        FALSE       FALSE       FALSE #> 120         FALSE FALSE        FALSE       FALSE       FALSE #> 121         FALSE FALSE        FALSE       FALSE       FALSE #> 122         FALSE FALSE        FALSE       FALSE       FALSE #> 123         FALSE FALSE        FALSE       FALSE       FALSE #> 124         FALSE FALSE        FALSE        TRUE       FALSE #> 101          TRUE FALSE         TRUE       FALSE       FALSE #> 111          TRUE FALSE        FALSE       FALSE       FALSE #> 1210         TRUE FALSE        FALSE       FALSE       FALSE #> 136          TRUE FALSE        FALSE       FALSE        TRUE #> 141          TRUE FALSE        FALSE       FALSE       FALSE #> 151          TRUE FALSE        FALSE       FALSE       FALSE #> 166          TRUE FALSE        FALSE       FALSE       FALSE #> 171          TRUE FALSE        FALSE       FALSE       FALSE #> 185          TRUE FALSE        FALSE       FALSE       FALSE #> 191          TRUE FALSE        FALSE       FALSE       FALSE #> 201          TRUE FALSE        FALSE        TRUE       FALSE #> 4           FALSE FALSE         TRUE       FALSE        TRUE #> 5           FALSE FALSE        FALSE       FALSE       FALSE #> 6           FALSE FALSE        FALSE       FALSE       FALSE #> 7           FALSE FALSE        FALSE        TRUE       FALSE #> 45          FALSE FALSE         TRUE       FALSE       FALSE #> 46          FALSE FALSE        FALSE       FALSE        TRUE #> 47          FALSE FALSE        FALSE       FALSE       FALSE #> 48          FALSE FALSE        FALSE       FALSE       FALSE #> 49          FALSE FALSE        FALSE       FALSE       FALSE #> 50          FALSE FALSE        FALSE       FALSE       FALSE #> 51          FALSE FALSE        FALSE       FALSE       FALSE #> 52          FALSE FALSE        FALSE        TRUE       FALSE #> 53          FALSE FALSE        FALSE       FALSE       FALSE #> 1361        FALSE  TRUE         TRUE        TRUE        TRUE #> 148         FALSE FALSE         TRUE       FALSE        TRUE #> 149         FALSE FALSE        FALSE       FALSE       FALSE #> 150         FALSE FALSE        FALSE       FALSE       FALSE #> 1511        FALSE FALSE        FALSE        TRUE       FALSE #> 169         FALSE  TRUE         TRUE        TRUE        TRUE #> 170         FALSE FALSE         TRUE        TRUE       FALSE #> 1711        FALSE FALSE        FALSE       FALSE       FALSE #> 172         FALSE  TRUE        FALSE       FALSE        TRUE #> 1851        FALSE FALSE         TRUE       FALSE        TRUE #> 186         FALSE FALSE        FALSE        TRUE       FALSE #> 187         FALSE FALSE         TRUE       FALSE        TRUE #> 188         FALSE FALSE        FALSE       FALSE       FALSE #> 189         FALSE FALSE        FALSE       FALSE       FALSE #> 190         FALSE FALSE        FALSE       FALSE       FALSE #> 1911        FALSE FALSE        FALSE       FALSE       FALSE #> 192         FALSE FALSE        FALSE       FALSE       FALSE #> 193         FALSE FALSE        FALSE        TRUE       FALSE #> 194         FALSE FALSE         TRUE       FALSE        TRUE #> 195         FALSE FALSE        FALSE       FALSE       FALSE #> 196         FALSE FALSE        FALSE       FALSE       FALSE #> 197         FALSE FALSE        FALSE       FALSE       FALSE #> 198         FALSE FALSE        FALSE       FALSE       FALSE #> 199         FALSE FALSE        FALSE       FALSE       FALSE #> 200         FALSE FALSE        FALSE        TRUE       FALSE #> 212         FALSE FALSE         TRUE       FALSE       FALSE #> 213         FALSE FALSE        FALSE       FALSE        TRUE #> 214         FALSE FALSE        FALSE        TRUE       FALSE #> 226         FALSE FALSE         TRUE       FALSE       FALSE #> 227         FALSE FALSE        FALSE       FALSE        TRUE #> 228         FALSE FALSE        FALSE        TRUE       FALSE #> 229         FALSE FALSE         TRUE        TRUE       FALSE #> 230         FALSE FALSE        FALSE       FALSE        TRUE #> 231         FALSE FALSE         TRUE        TRUE       FALSE #> 232         FALSE FALSE        FALSE       FALSE        TRUE #> 241         FALSE FALSE         TRUE        TRUE        TRUE #> 242         FALSE FALSE         TRUE        TRUE        TRUE #> 243         FALSE FALSE         TRUE        TRUE        TRUE #> 244         FALSE FALSE        FALSE       FALSE       FALSE #> 245         FALSE FALSE        FALSE       FALSE       FALSE #> 246         FALSE FALSE        FALSE       FALSE       FALSE #> 247         FALSE FALSE         TRUE       FALSE        TRUE #> 248         FALSE FALSE        FALSE        TRUE       FALSE #> 265         FALSE FALSE         TRUE        TRUE        TRUE #> 21          FALSE FALSE         TRUE       FALSE       FALSE #> 22          FALSE FALSE        FALSE       FALSE        TRUE #> 23          FALSE FALSE        FALSE       FALSE       FALSE #> 24          FALSE FALSE        FALSE       FALSE       FALSE #> 25          FALSE FALSE        FALSE       FALSE       FALSE #> 26          FALSE FALSE        FALSE       FALSE       FALSE #> 27          FALSE FALSE        FALSE       FALSE       FALSE #> 28          FALSE FALSE        FALSE       FALSE       FALSE #> 29          FALSE FALSE        FALSE       FALSE       FALSE #> 30          FALSE FALSE        FALSE       FALSE       FALSE #> 31          FALSE FALSE        FALSE       FALSE       FALSE #> 32          FALSE FALSE        FALSE       FALSE       FALSE #> 33          FALSE FALSE        FALSE       FALSE       FALSE #> 34          FALSE FALSE        FALSE       FALSE       FALSE #> 35          FALSE FALSE        FALSE       FALSE       FALSE #> 36          FALSE FALSE        FALSE       FALSE       FALSE #> 37          FALSE FALSE        FALSE       FALSE       FALSE #> 38          FALSE FALSE        FALSE       FALSE       FALSE #> 39          FALSE FALSE        FALSE       FALSE       FALSE #> 40          FALSE FALSE        FALSE        TRUE       FALSE #> 41          FALSE FALSE        FALSE       FALSE       FALSE #> 42          FALSE FALSE        FALSE       FALSE       FALSE #> 61          FALSE FALSE         TRUE       FALSE       FALSE #> 62          FALSE FALSE        FALSE       FALSE        TRUE #> 63          FALSE FALSE        FALSE       FALSE       FALSE #> 64          FALSE FALSE        FALSE       FALSE       FALSE #> 65          FALSE FALSE        FALSE       FALSE       FALSE #> 66          FALSE FALSE        FALSE        TRUE       FALSE #> 67          FALSE FALSE        FALSE       FALSE       FALSE #> 68          FALSE FALSE        FALSE       FALSE       FALSE #> 69          FALSE FALSE         TRUE       FALSE        TRUE #> 70          FALSE FALSE        FALSE        TRUE       FALSE #> 95          FALSE FALSE         TRUE       FALSE       FALSE #> 96          FALSE FALSE        FALSE       FALSE       FALSE #> 97          FALSE FALSE        FALSE       FALSE        TRUE #> 98          FALSE FALSE        FALSE       FALSE       FALSE #> 99          FALSE FALSE        FALSE       FALSE       FALSE #> 100         FALSE FALSE        FALSE       FALSE       FALSE #> 1011        FALSE FALSE        FALSE       FALSE       FALSE #> 102         FALSE FALSE        FALSE       FALSE       FALSE #> 103         FALSE FALSE        FALSE       FALSE       FALSE #> 104         FALSE FALSE        FALSE       FALSE       FALSE #> 105         FALSE FALSE        FALSE       FALSE       FALSE #> 106         FALSE FALSE        FALSE       FALSE       FALSE #> 107         FALSE FALSE        FALSE       FALSE       FALSE #> 108         FALSE FALSE        FALSE       FALSE       FALSE #> 109         FALSE FALSE        FALSE       FALSE       FALSE #> 110         FALSE FALSE        FALSE       FALSE       FALSE #> 1111        FALSE FALSE        FALSE       FALSE       FALSE #> 112         FALSE FALSE        FALSE       FALSE       FALSE #> 113         FALSE FALSE        FALSE        TRUE       FALSE #> 137         FALSE FALSE         TRUE       FALSE        TRUE #> 138         FALSE FALSE        FALSE       FALSE       FALSE #> 139         FALSE FALSE        FALSE       FALSE       FALSE #> 140         FALSE FALSE        FALSE       FALSE       FALSE #> 1411        FALSE FALSE        FALSE       FALSE       FALSE #> 142         FALSE FALSE        FALSE        TRUE       FALSE #> 143         FALSE FALSE        FALSE       FALSE       FALSE #> 144         FALSE FALSE         TRUE       FALSE        TRUE #> 145         FALSE FALSE        FALSE       FALSE       FALSE #> 146         FALSE FALSE        FALSE       FALSE       FALSE #> 147         FALSE FALSE        FALSE        TRUE       FALSE #> 1521        FALSE FALSE         TRUE       FALSE        TRUE #> 1531        FALSE FALSE        FALSE       FALSE       FALSE #> 1541        FALSE FALSE        FALSE       FALSE       FALSE #> 1551        FALSE FALSE        FALSE       FALSE       FALSE #> 1561        FALSE FALSE        FALSE       FALSE       FALSE #> 1571        FALSE FALSE        FALSE       FALSE       FALSE #> 1581        FALSE FALSE        FALSE       FALSE       FALSE #> 1591        FALSE FALSE        FALSE       FALSE       FALSE #> 1601        FALSE FALSE        FALSE       FALSE       FALSE #> 1611        FALSE FALSE        FALSE       FALSE       FALSE #> 1621        FALSE FALSE        FALSE       FALSE       FALSE #> 1631        FALSE FALSE        FALSE       FALSE       FALSE #> 1641        FALSE FALSE        FALSE       FALSE       FALSE #> 1651        FALSE FALSE        FALSE        TRUE       FALSE #> 1661        FALSE FALSE         TRUE        TRUE        TRUE #> 176         FALSE FALSE         TRUE       FALSE       FALSE #> 177         FALSE FALSE        FALSE        TRUE        TRUE #> 2011        FALSE FALSE         TRUE       FALSE        TRUE #> 202         FALSE FALSE        FALSE       FALSE       FALSE #> 203         FALSE FALSE        FALSE       FALSE       FALSE #> 204         FALSE FALSE        FALSE       FALSE       FALSE #> 205         FALSE FALSE        FALSE       FALSE       FALSE #> 206         FALSE FALSE        FALSE       FALSE       FALSE #> 207         FALSE FALSE        FALSE       FALSE       FALSE #> 208         FALSE FALSE        FALSE       FALSE       FALSE #> 209         FALSE FALSE        FALSE        TRUE       FALSE #> 210         FALSE FALSE        FALSE       FALSE       FALSE #> 211         FALSE FALSE        FALSE       FALSE       FALSE #> 215         FALSE  TRUE         TRUE        TRUE        TRUE #> 216         FALSE FALSE        FALSE       FALSE       FALSE #> 217         FALSE FALSE         TRUE       FALSE       FALSE #> 218         FALSE FALSE        FALSE       FALSE       FALSE #> 219         FALSE FALSE        FALSE       FALSE       FALSE #> 220         FALSE FALSE        FALSE       FALSE       FALSE #> 221         FALSE  TRUE        FALSE        TRUE        TRUE #> 223         FALSE  TRUE         TRUE        TRUE        TRUE #> 224         FALSE FALSE         TRUE        TRUE       FALSE #> 225         FALSE FALSE        FALSE       FALSE        TRUE #> 233         FALSE FALSE         TRUE       FALSE       FALSE #> 234         FALSE FALSE        FALSE       FALSE       FALSE #> 235         FALSE  TRUE        FALSE        TRUE        TRUE #> 249         FALSE FALSE         TRUE       FALSE        TRUE #> 250         FALSE FALSE        FALSE        TRUE       FALSE #> 251         FALSE FALSE        FALSE       FALSE       FALSE #> 274         FALSE FALSE         TRUE       FALSE       FALSE #> 275         FALSE FALSE        FALSE       FALSE       FALSE #> 276         FALSE FALSE        FALSE       FALSE        TRUE #> 277         FALSE FALSE        FALSE        TRUE       FALSE #> 1141        FALSE FALSE         TRUE       FALSE       FALSE #> 1151        FALSE FALSE        FALSE       FALSE        TRUE #> 1161        FALSE FALSE        FALSE       FALSE       FALSE #> 1171        FALSE FALSE        FALSE       FALSE       FALSE #> 1181        FALSE FALSE        FALSE       FALSE       FALSE #> 1191        FALSE FALSE        FALSE       FALSE       FALSE #> 1201        FALSE FALSE        FALSE       FALSE       FALSE #> 1211        FALSE FALSE        FALSE       FALSE       FALSE #> 1221        FALSE FALSE        FALSE       FALSE       FALSE #> 1231        FALSE FALSE        FALSE       FALSE       FALSE #> 1241        FALSE FALSE        FALSE        TRUE       FALSE #> 611         FALSE FALSE         TRUE       FALSE       FALSE #> 621         FALSE FALSE        FALSE       FALSE        TRUE #> 631         FALSE FALSE        FALSE       FALSE       FALSE #> 641         FALSE FALSE        FALSE       FALSE       FALSE #> 651         FALSE FALSE        FALSE       FALSE       FALSE #> 661         FALSE FALSE        FALSE        TRUE       FALSE #> 671         FALSE FALSE        FALSE       FALSE       FALSE #> 681         FALSE FALSE        FALSE       FALSE       FALSE #> 2110        FALSE FALSE         TRUE       FALSE       FALSE #> 2210        FALSE FALSE        FALSE       FALSE        TRUE #> 2310        FALSE FALSE        FALSE       FALSE       FALSE #> 2410        FALSE FALSE        FALSE       FALSE       FALSE #> 2510        FALSE FALSE        FALSE       FALSE       FALSE #> 2610        FALSE FALSE        FALSE       FALSE       FALSE #> 279         FALSE FALSE        FALSE       FALSE       FALSE #> 281         FALSE FALSE        FALSE       FALSE       FALSE #> 291         FALSE FALSE        FALSE       FALSE       FALSE #> 301         FALSE FALSE        FALSE       FALSE       FALSE #> 311         FALSE FALSE        FALSE       FALSE       FALSE #> 321         FALSE FALSE        FALSE       FALSE       FALSE #> 331         FALSE FALSE        FALSE       FALSE       FALSE #> 341         FALSE FALSE        FALSE       FALSE       FALSE #> 351         FALSE FALSE        FALSE       FALSE       FALSE #> 361         FALSE FALSE        FALSE       FALSE       FALSE #> 371         FALSE FALSE        FALSE       FALSE       FALSE #> 381         FALSE FALSE        FALSE       FALSE       FALSE #> 391         FALSE FALSE        FALSE       FALSE       FALSE #> 401         FALSE FALSE        FALSE        TRUE       FALSE #> 411         FALSE FALSE        FALSE       FALSE       FALSE #> 421         FALSE FALSE        FALSE       FALSE       FALSE #> 861         FALSE FALSE         TRUE       FALSE        TRUE #> 871         FALSE FALSE        FALSE       FALSE       FALSE #> 881         FALSE FALSE        FALSE       FALSE       FALSE #> 891         FALSE FALSE        FALSE       FALSE       FALSE #> 901         FALSE FALSE        FALSE       FALSE       FALSE #> 911         FALSE FALSE        FALSE       FALSE       FALSE #> 921         FALSE FALSE        FALSE       FALSE       FALSE #> 931         FALSE FALSE        FALSE       FALSE       FALSE #> 941         FALSE FALSE        FALSE        TRUE       FALSE #> 541         FALSE FALSE         TRUE       FALSE       FALSE #> 551         FALSE FALSE        FALSE       FALSE        TRUE #> 561         FALSE FALSE        FALSE       FALSE       FALSE #> 571         FALSE FALSE        FALSE       FALSE       FALSE #> 581         FALSE  TRUE        FALSE        TRUE       FALSE #> 1010        FALSE FALSE         TRUE       FALSE       FALSE #> 1110        FALSE FALSE        FALSE       FALSE       FALSE #> 1212        FALSE FALSE        FALSE       FALSE       FALSE #> 1310        FALSE FALSE        FALSE       FALSE        TRUE #> 1410        FALSE FALSE        FALSE       FALSE       FALSE #> 1510        FALSE FALSE        FALSE       FALSE       FALSE #> 1610        FALSE FALSE        FALSE       FALSE       FALSE #> 1710        FALSE FALSE        FALSE       FALSE       FALSE #> 1810        FALSE FALSE        FALSE       FALSE       FALSE #> 1910        FALSE FALSE        FALSE       FALSE       FALSE #> 2010        FALSE FALSE        FALSE        TRUE       FALSE"},{"path":"https://gr3602.github.io/wpeR/reference/wolf_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf monitoring genetic samples metadata — wolf_samples","title":"Wolf monitoring genetic samples metadata — wolf_samples","text":"Metadata selected genetic samples wolves collected 2015 2021, scope Slovenian National Wolf Monitoring","code":""},{"path":"https://gr3602.github.io/wpeR/reference/wolf_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf monitoring genetic samples metadata — wolf_samples","text":"","code":"wolf_samples"},{"path":"https://gr3602.github.io/wpeR/reference/wolf_samples.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf monitoring genetic samples metadata — wolf_samples","text":"data frame 407 rows 7 columns: Sample Sample unique identifier code Date Date sample collection (format: YYYY-MM-DD) AnimalRef Identification string particular animal GeneticSex Sex animal sample belong (format: M = male, F = female) lat latitude (N-S) sample (CRS: WGS84; EPSG: 4326) lng longitude (W-E) sample (CRS: WGS84; EPSG: 4326) SType Type sample. (Direct Saliva, Scat, Urine, Saliva, Tissue, Decomposing Tissue, Blood)","code":""},{"path":"https://gr3602.github.io/wpeR/reference/wolf_samples.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wolf monitoring genetic samples metadata — wolf_samples","text":"Slovenian National Wolf Monitoring","code":""},{"path":"https://gr3602.github.io/wpeR/news/index.html","id":"wper-010","dir":"Changelog","previous_headings":"","what":"wpeR 0.1.0","title":"wpeR 0.1.0","text":"Initial CRAN submission.","code":""}]
