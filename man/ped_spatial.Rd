% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ped_spatial.R
\name{ped_spatial}
\alias{ped_spatial}
\alias{PreparePedigreeSpatial}
\title{Get files for spatial representation of pedigree}
\usage{
ped_spatial(
  plottable,
  na.rm = TRUE,
  output = "list",
  fullsibdata = NULL,
  sibthreshold = 0,
  path = "",
  filename = "",
  out.format = "geopackage",
  time.limits = c(as.Date("1900-01-01"), as.Date("2100-01-01")),
  time.limit.rep = FALSE,
  time.limit.offspring = FALSE,
  time.limit.moves = FALSE
)
}
\arguments{
\item{plottable}{Data frame. Output of \code{\link{plot_table}} function.}

\item{na.rm}{Logical (\code{TRUE}/\code{FALSE}). Remove samples with missing coordinates and/or dates.}

\item{output}{Character vector specifying the desired output type ('list' - default or 'gis').
Available outputs: list: all spatial data returned as list, gis: all spatial data
returned as georeferenced files.}

\item{fullsibdata}{Data frame with COLONY2 full-sibling data.}

\item{sibthreshold}{Numeric. P-value threshold for sibship assignment.}

\item{path}{System path for storing georeferenced files.}

\item{filename}{Common name for all georeferenced files.}

\item{out.format}{Character string. Type of georeferenced files to be generated.
Can be ether \code{"geopackage"} or \code{"shapefile"}. Default is \code{"geopackage"}}

\item{time.limits}{Vector of two \code{Date} values as the time window.}

\item{time.limit.rep}{Logical (\code{TRUE}/\code{FALSE}). Apply time limits to
reference samples of reproductive animals.}

\item{time.limit.offspring}{Logical (\code{TRUE}/\code{FALSE}). Apply time limits to
reference samples of offspring.}

\item{time.limit.moves}{Logical (\code{TRUE}/\code{FALSE}). Apply time limits to
movement data.}
}
\value{
Based on the \code{output} parameter the function can return a list of \code{\link{sf}} objects,
a georeferenced vector data files or both.

Most of the objects are created separately for mothers, fathers and offspring,
this include: reference points (\code{motherRpoints}, \code{fatherRpoints} and
\code{offspringRpoints}), movement points (\code{motherMovePoints}, \code{fatherMovePoints}
and \code{offspringMovePoints}), movement lines (\code{motherMoveLines}, \code{fatherMoveLines}
and \code{offspringMoveLines}) and movement polygons (\code{motherMovePoygons},
\code{fatherMovePolygons} and \code{offspringMovePolygons}).

Besides that the function also produces lines that connect mothers and
their offspring (\code{maternityLines}), fathers and their offspring
(\code{paternityLines}) and full siblings (\code{FullsibLines}).
}
\description{
Creates georeferenced data for spatial
pedigree representation form the output of \code{\link[=plot_table]{plot_table()}} function.
}
\examples{
# Prepare the data for usage with ped_spatial() function.
# Get animal timespan data using the anim_timespan() function.
animal_ts <- anim_timespan(wolf_samples$AnimalRef,
  wolf_samples$Date,
  wolf_samples$SType,
  dead = c("Tissue")
)
# Add animal timespan to the sampledata
sampledata <- merge(wolf_samples, animal_ts, by.x = "AnimalRef", by.y = "ID", all.x = TRUE)
# Define the path to the pedigree data file.
path <- paste0(system.file("extdata", package = "wpeR"), "/wpeR_samplePed")
# Retrieve the pedigree data from the get_colony function.
ped_colony <- get_colony(path, sampledata, rm_obsolete_parents = TRUE, out = "FamAgg")
# Organize families and expand pedigree data using the org_fams function.
org_tables <- org_fams(ped_colony, sampledata, output = "both")
# Prepare data for plotting.#'
pt <- plot_table(org_tables$fams[1, ],
  org_tables$fams,
  org_tables$ped,
  sampledata,
  deadSample = c("Tissue", "Decomposing Tissue", "Blood")
)

# Run the function
# Get files for spatial pedigree representation in list format.
ped_spatial(pt)

}
